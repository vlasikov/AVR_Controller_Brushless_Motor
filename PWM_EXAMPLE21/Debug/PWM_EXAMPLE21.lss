
PWM_EXAMPLE21.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000015fa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  0000166e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000058  00802000  00802000  0000166e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000166e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000016a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000228  00000000  00000000  000016e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006fde  00000000  00000000  00001908  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003333  00000000  00000000  000088e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002abd  00000000  00000000  0000bc19  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000e78  00000000  00000000  0000e6d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00029b17  00000000  00000000  0000f550  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000275a  00000000  00000000  00039067  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000228  00000000  00000000  0003b7c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00008a68  00000000  00000000  0003b9e9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	fa c0       	rjmp	.+500    	; 0x1f6 <__ctors_end>
       2:	00 00       	nop
       4:	0c c1       	rjmp	.+536    	; 0x21e <__bad_interrupt>
       6:	00 00       	nop
       8:	0a c1       	rjmp	.+532    	; 0x21e <__bad_interrupt>
       a:	00 00       	nop
       c:	08 c1       	rjmp	.+528    	; 0x21e <__bad_interrupt>
       e:	00 00       	nop
      10:	06 c1       	rjmp	.+524    	; 0x21e <__bad_interrupt>
      12:	00 00       	nop
      14:	04 c1       	rjmp	.+520    	; 0x21e <__bad_interrupt>
      16:	00 00       	nop
      18:	02 c1       	rjmp	.+516    	; 0x21e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	00 c1       	rjmp	.+512    	; 0x21e <__bad_interrupt>
      1e:	00 00       	nop
      20:	fe c0       	rjmp	.+508    	; 0x21e <__bad_interrupt>
      22:	00 00       	nop
      24:	fc c0       	rjmp	.+504    	; 0x21e <__bad_interrupt>
      26:	00 00       	nop
      28:	fa c0       	rjmp	.+500    	; 0x21e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	f8 c0       	rjmp	.+496    	; 0x21e <__bad_interrupt>
      2e:	00 00       	nop
      30:	f6 c0       	rjmp	.+492    	; 0x21e <__bad_interrupt>
      32:	00 00       	nop
      34:	f4 c0       	rjmp	.+488    	; 0x21e <__bad_interrupt>
      36:	00 00       	nop
      38:	44 c1       	rjmp	.+648    	; 0x2c2 <__vector_14>
      3a:	00 00       	nop
      3c:	6f c1       	rjmp	.+734    	; 0x31c <__vector_15>
      3e:	00 00       	nop
      40:	9a c1       	rjmp	.+820    	; 0x376 <__vector_16>
      42:	00 00       	nop
      44:	c5 c1       	rjmp	.+906    	; 0x3d0 <__vector_17>
      46:	00 00       	nop
      48:	f0 c1       	rjmp	.+992    	; 0x42a <__vector_18>
      4a:	00 00       	nop
      4c:	1b c2       	rjmp	.+1078   	; 0x484 <__vector_19>
      4e:	00 00       	nop
      50:	46 c2       	rjmp	.+1164   	; 0x4de <__vector_20>
      52:	00 00       	nop
      54:	71 c2       	rjmp	.+1250   	; 0x538 <__vector_21>
      56:	00 00       	nop
      58:	9c c2       	rjmp	.+1336   	; 0x592 <__vector_22>
      5a:	00 00       	nop
      5c:	c7 c2       	rjmp	.+1422   	; 0x5ec <__vector_23>
      5e:	00 00       	nop
      60:	de c0       	rjmp	.+444    	; 0x21e <__bad_interrupt>
      62:	00 00       	nop
      64:	dc c0       	rjmp	.+440    	; 0x21e <__bad_interrupt>
      66:	00 00       	nop
      68:	da c0       	rjmp	.+436    	; 0x21e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	d8 c0       	rjmp	.+432    	; 0x21e <__bad_interrupt>
      6e:	00 00       	nop
      70:	d6 c0       	rjmp	.+428    	; 0x21e <__bad_interrupt>
      72:	00 00       	nop
      74:	d4 c0       	rjmp	.+424    	; 0x21e <__bad_interrupt>
      76:	00 00       	nop
      78:	d2 c0       	rjmp	.+420    	; 0x21e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	d0 c0       	rjmp	.+416    	; 0x21e <__bad_interrupt>
      7e:	00 00       	nop
      80:	ce c0       	rjmp	.+412    	; 0x21e <__bad_interrupt>
      82:	00 00       	nop
      84:	cc c0       	rjmp	.+408    	; 0x21e <__bad_interrupt>
      86:	00 00       	nop
      88:	ca c0       	rjmp	.+404    	; 0x21e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c8 c0       	rjmp	.+400    	; 0x21e <__bad_interrupt>
      8e:	00 00       	nop
      90:	c6 c0       	rjmp	.+396    	; 0x21e <__bad_interrupt>
      92:	00 00       	nop
      94:	c4 c0       	rjmp	.+392    	; 0x21e <__bad_interrupt>
      96:	00 00       	nop
      98:	c2 c0       	rjmp	.+388    	; 0x21e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	c0 c0       	rjmp	.+384    	; 0x21e <__bad_interrupt>
      9e:	00 00       	nop
      a0:	be c0       	rjmp	.+380    	; 0x21e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	bc c0       	rjmp	.+376    	; 0x21e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	ba c0       	rjmp	.+372    	; 0x21e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	b8 c0       	rjmp	.+368    	; 0x21e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	b6 c0       	rjmp	.+364    	; 0x21e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	b4 c0       	rjmp	.+360    	; 0x21e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	b2 c0       	rjmp	.+356    	; 0x21e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	86 c4       	rjmp	.+2316   	; 0x9ca <__vector_47>
      be:	00 00       	nop
      c0:	b1 c4       	rjmp	.+2402   	; 0xa24 <__vector_48>
      c2:	00 00       	nop
      c4:	dc c4       	rjmp	.+2488   	; 0xa7e <__vector_49>
      c6:	00 00       	nop
      c8:	07 c5       	rjmp	.+2574   	; 0xad8 <__vector_50>
      ca:	00 00       	nop
      cc:	32 c5       	rjmp	.+2660   	; 0xb32 <__vector_51>
      ce:	00 00       	nop
      d0:	5d c5       	rjmp	.+2746   	; 0xb8c <__vector_52>
      d2:	00 00       	nop
      d4:	88 c5       	rjmp	.+2832   	; 0xbe6 <__vector_53>
      d6:	00 00       	nop
      d8:	b3 c5       	rjmp	.+2918   	; 0xc40 <__vector_54>
      da:	00 00       	nop
      dc:	de c5       	rjmp	.+3004   	; 0xc9a <__vector_55>
      de:	00 00       	nop
      e0:	09 c6       	rjmp	.+3090   	; 0xcf4 <__vector_56>
      e2:	00 00       	nop
      e4:	9c c0       	rjmp	.+312    	; 0x21e <__bad_interrupt>
      e6:	00 00       	nop
      e8:	9a c0       	rjmp	.+308    	; 0x21e <__bad_interrupt>
      ea:	00 00       	nop
      ec:	98 c0       	rjmp	.+304    	; 0x21e <__bad_interrupt>
      ee:	00 00       	nop
      f0:	96 c0       	rjmp	.+300    	; 0x21e <__bad_interrupt>
      f2:	00 00       	nop
      f4:	94 c0       	rjmp	.+296    	; 0x21e <__bad_interrupt>
      f6:	00 00       	nop
      f8:	92 c0       	rjmp	.+292    	; 0x21e <__bad_interrupt>
      fa:	00 00       	nop
      fc:	90 c0       	rjmp	.+288    	; 0x21e <__bad_interrupt>
      fe:	00 00       	nop
     100:	8e c0       	rjmp	.+284    	; 0x21e <__bad_interrupt>
     102:	00 00       	nop
     104:	8c c0       	rjmp	.+280    	; 0x21e <__bad_interrupt>
     106:	00 00       	nop
     108:	8a c0       	rjmp	.+276    	; 0x21e <__bad_interrupt>
     10a:	00 00       	nop
     10c:	88 c0       	rjmp	.+272    	; 0x21e <__bad_interrupt>
     10e:	00 00       	nop
     110:	86 c0       	rjmp	.+268    	; 0x21e <__bad_interrupt>
     112:	00 00       	nop
     114:	84 c0       	rjmp	.+264    	; 0x21e <__bad_interrupt>
     116:	00 00       	nop
     118:	82 c0       	rjmp	.+260    	; 0x21e <__bad_interrupt>
     11a:	00 00       	nop
     11c:	80 c0       	rjmp	.+256    	; 0x21e <__bad_interrupt>
     11e:	00 00       	nop
     120:	7e c0       	rjmp	.+252    	; 0x21e <__bad_interrupt>
     122:	00 00       	nop
     124:	7c c0       	rjmp	.+248    	; 0x21e <__bad_interrupt>
     126:	00 00       	nop
     128:	7a c0       	rjmp	.+244    	; 0x21e <__bad_interrupt>
     12a:	00 00       	nop
     12c:	78 c0       	rjmp	.+240    	; 0x21e <__bad_interrupt>
     12e:	00 00       	nop
     130:	76 c0       	rjmp	.+236    	; 0x21e <__bad_interrupt>
     132:	00 00       	nop
     134:	88 c2       	rjmp	.+1296   	; 0x646 <__vector_77>
     136:	00 00       	nop
     138:	b3 c2       	rjmp	.+1382   	; 0x6a0 <__vector_78>
     13a:	00 00       	nop
     13c:	de c2       	rjmp	.+1468   	; 0x6fa <__vector_79>
     13e:	00 00       	nop
     140:	09 c3       	rjmp	.+1554   	; 0x754 <__vector_80>
     142:	00 00       	nop
     144:	34 c3       	rjmp	.+1640   	; 0x7ae <__vector_81>
     146:	00 00       	nop
     148:	5f c3       	rjmp	.+1726   	; 0x808 <__vector_82>
     14a:	00 00       	nop
     14c:	8a c3       	rjmp	.+1812   	; 0x862 <__vector_83>
     14e:	00 00       	nop
     150:	b5 c3       	rjmp	.+1898   	; 0x8bc <__vector_84>
     152:	00 00       	nop
     154:	e0 c3       	rjmp	.+1984   	; 0x916 <__vector_85>
     156:	00 00       	nop
     158:	0b c4       	rjmp	.+2070   	; 0x970 <__vector_86>
     15a:	00 00       	nop
     15c:	60 c0       	rjmp	.+192    	; 0x21e <__bad_interrupt>
     15e:	00 00       	nop
     160:	5e c0       	rjmp	.+188    	; 0x21e <__bad_interrupt>
     162:	00 00       	nop
     164:	5c c0       	rjmp	.+184    	; 0x21e <__bad_interrupt>
     166:	00 00       	nop
     168:	5a c0       	rjmp	.+180    	; 0x21e <__bad_interrupt>
     16a:	00 00       	nop
     16c:	58 c0       	rjmp	.+176    	; 0x21e <__bad_interrupt>
     16e:	00 00       	nop
     170:	56 c0       	rjmp	.+172    	; 0x21e <__bad_interrupt>
     172:	00 00       	nop
     174:	54 c0       	rjmp	.+168    	; 0x21e <__bad_interrupt>
     176:	00 00       	nop
     178:	52 c0       	rjmp	.+164    	; 0x21e <__bad_interrupt>
     17a:	00 00       	nop
     17c:	50 c0       	rjmp	.+160    	; 0x21e <__bad_interrupt>
     17e:	00 00       	nop
     180:	4e c0       	rjmp	.+156    	; 0x21e <__bad_interrupt>
     182:	00 00       	nop
     184:	4c c0       	rjmp	.+152    	; 0x21e <__bad_interrupt>
     186:	00 00       	nop
     188:	4a c0       	rjmp	.+148    	; 0x21e <__bad_interrupt>
     18a:	00 00       	nop
     18c:	48 c0       	rjmp	.+144    	; 0x21e <__bad_interrupt>
     18e:	00 00       	nop
     190:	46 c0       	rjmp	.+140    	; 0x21e <__bad_interrupt>
     192:	00 00       	nop
     194:	44 c0       	rjmp	.+136    	; 0x21e <__bad_interrupt>
     196:	00 00       	nop
     198:	42 c0       	rjmp	.+132    	; 0x21e <__bad_interrupt>
     19a:	00 00       	nop
     19c:	40 c0       	rjmp	.+128    	; 0x21e <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	3e c0       	rjmp	.+124    	; 0x21e <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	3c c0       	rjmp	.+120    	; 0x21e <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	3a c0       	rjmp	.+116    	; 0x21e <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	38 c0       	rjmp	.+112    	; 0x21e <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	ce c5       	rjmp	.+2972   	; 0xd4e <__vector_108>
     1b2:	00 00       	nop
     1b4:	f9 c5       	rjmp	.+3058   	; 0xda8 <__vector_109>
     1b6:	00 00       	nop
     1b8:	24 c6       	rjmp	.+3144   	; 0xe02 <__vector_110>
     1ba:	00 00       	nop
     1bc:	4f c6       	rjmp	.+3230   	; 0xe5c <__vector_111>
     1be:	00 00       	nop
     1c0:	7a c6       	rjmp	.+3316   	; 0xeb6 <__vector_112>
     1c2:	00 00       	nop
     1c4:	a5 c6       	rjmp	.+3402   	; 0xf10 <__vector_113>
     1c6:	00 00       	nop
     1c8:	2a c0       	rjmp	.+84     	; 0x21e <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	28 c0       	rjmp	.+80     	; 0x21e <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	26 c0       	rjmp	.+76     	; 0x21e <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	24 c0       	rjmp	.+72     	; 0x21e <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	22 c0       	rjmp	.+68     	; 0x21e <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	20 c0       	rjmp	.+64     	; 0x21e <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	1e c0       	rjmp	.+60     	; 0x21e <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	1c c0       	rjmp	.+56     	; 0x21e <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	cd 08       	sbc	r12, r13
     1ea:	e0 08       	sbc	r14, r0
     1ec:	f3 08       	sbc	r15, r3
     1ee:	06 09       	sbc	r16, r6
     1f0:	19 09       	sbc	r17, r9
     1f2:	2c 09       	sbc	r18, r12
     1f4:	3f 09       	sbc	r19, r15

000001f6 <__ctors_end>:
     1f6:	11 24       	eor	r1, r1
     1f8:	1f be       	out	0x3f, r1	; 63
     1fa:	cf ef       	ldi	r28, 0xFF	; 255
     1fc:	cd bf       	out	0x3d, r28	; 61
     1fe:	df e3       	ldi	r29, 0x3F	; 63
     200:	de bf       	out	0x3e, r29	; 62
     202:	00 e0       	ldi	r16, 0x00	; 0
     204:	0c bf       	out	0x3c, r16	; 60

00000206 <__do_clear_bss>:
     206:	20 e2       	ldi	r18, 0x20	; 32
     208:	a0 e0       	ldi	r26, 0x00	; 0
     20a:	b0 e2       	ldi	r27, 0x20	; 32
     20c:	01 c0       	rjmp	.+2      	; 0x210 <.do_clear_bss_start>

0000020e <.do_clear_bss_loop>:
     20e:	1d 92       	st	X+, r1

00000210 <.do_clear_bss_start>:
     210:	a8 35       	cpi	r26, 0x58	; 88
     212:	b2 07       	cpc	r27, r18
     214:	e1 f7       	brne	.-8      	; 0x20e <.do_clear_bss_loop>
     216:	0e 94 87 0a 	call	0x150e	; 0x150e <main>
     21a:	0c 94 fb 0a 	jmp	0x15f6	; 0x15f6 <_exit>

0000021e <__bad_interrupt>:
     21e:	f0 ce       	rjmp	.-544    	; 0x0 <__vectors>

00000220 <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
     220:	cf 93       	push	r28
     222:	df 93       	push	r29
     224:	1f 92       	push	r1
     226:	1f 92       	push	r1
     228:	cd b7       	in	r28, 0x3d	; 61
     22a:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     22c:	8f ef       	ldi	r24, 0xFF	; 255
     22e:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     232:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     236:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     23a:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     23e:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
     242:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
     246:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     24a:	8f b7       	in	r24, 0x3f	; 63
     24c:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     24e:	f8 94       	cli
	return flags;
     250:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     252:	e0 e5       	ldi	r30, 0x50	; 80
     254:	f0 e0       	ldi	r31, 0x00	; 0
     256:	80 81       	ld	r24, Z
     258:	82 60       	ori	r24, 0x02	; 2
     25a:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     25c:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     25e:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     260:	81 ff       	sbrs	r24, 1
     262:	fd cf       	rjmp	.-6      	; 0x25e <sysclk_init+0x3e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
     264:	61 e0       	ldi	r22, 0x01	; 1
     266:	80 e4       	ldi	r24, 0x40	; 64
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	25 d0       	rcall	.+74     	; 0x2b6 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     26c:	8f b7       	in	r24, 0x3f	; 63
     26e:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     270:	f8 94       	cli
	return flags;
     272:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
     274:	e0 e5       	ldi	r30, 0x50	; 80
     276:	f0 e0       	ldi	r31, 0x00	; 0
     278:	80 81       	ld	r24, Z
     27a:	8e 7f       	andi	r24, 0xFE	; 254
     27c:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     27e:	9f bf       	out	0x3f, r25	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
     280:	0f 90       	pop	r0
     282:	0f 90       	pop	r0
     284:	df 91       	pop	r29
     286:	cf 91       	pop	r28
     288:	08 95       	ret

0000028a <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
     28a:	cf 93       	push	r28
     28c:	df 93       	push	r29
     28e:	1f 92       	push	r1
     290:	cd b7       	in	r28, 0x3d	; 61
     292:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     294:	9f b7       	in	r25, 0x3f	; 63
     296:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     298:	f8 94       	cli
	return flags;
     29a:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     29c:	e8 2f       	mov	r30, r24
     29e:	f0 e0       	ldi	r31, 0x00	; 0
     2a0:	e0 59       	subi	r30, 0x90	; 144
     2a2:	ff 4f       	sbci	r31, 0xFF	; 255
     2a4:	60 95       	com	r22
     2a6:	80 81       	ld	r24, Z
     2a8:	68 23       	and	r22, r24
     2aa:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     2ac:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     2ae:	0f 90       	pop	r0
     2b0:	df 91       	pop	r29
     2b2:	cf 91       	pop	r28
     2b4:	08 95       	ret

000002b6 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
     2b6:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
     2b8:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
     2ba:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
     2bc:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
     2be:	60 83       	st	Z, r22
	ret                             // Return to caller
     2c0:	08 95       	ret

000002c2 <__vector_14>:
	{
		cpu_irq_restore(iflags);
		return;
	}
	cpu_irq_restore(iflags);
}
     2c2:	1f 92       	push	r1
     2c4:	0f 92       	push	r0
     2c6:	0f b6       	in	r0, 0x3f	; 63
     2c8:	0f 92       	push	r0
     2ca:	11 24       	eor	r1, r1
     2cc:	0b b6       	in	r0, 0x3b	; 59
     2ce:	0f 92       	push	r0
     2d0:	2f 93       	push	r18
     2d2:	3f 93       	push	r19
     2d4:	4f 93       	push	r20
     2d6:	5f 93       	push	r21
     2d8:	6f 93       	push	r22
     2da:	7f 93       	push	r23
     2dc:	8f 93       	push	r24
     2de:	9f 93       	push	r25
     2e0:	af 93       	push	r26
     2e2:	bf 93       	push	r27
     2e4:	ef 93       	push	r30
     2e6:	ff 93       	push	r31
     2e8:	e0 91 46 20 	lds	r30, 0x2046	; 0x802046 <tc_tcc0_ovf_callback>
     2ec:	f0 91 47 20 	lds	r31, 0x2047	; 0x802047 <tc_tcc0_ovf_callback+0x1>
     2f0:	30 97       	sbiw	r30, 0x00	; 0
     2f2:	09 f0       	breq	.+2      	; 0x2f6 <__vector_14+0x34>
     2f4:	19 95       	eicall
     2f6:	ff 91       	pop	r31
     2f8:	ef 91       	pop	r30
     2fa:	bf 91       	pop	r27
     2fc:	af 91       	pop	r26
     2fe:	9f 91       	pop	r25
     300:	8f 91       	pop	r24
     302:	7f 91       	pop	r23
     304:	6f 91       	pop	r22
     306:	5f 91       	pop	r21
     308:	4f 91       	pop	r20
     30a:	3f 91       	pop	r19
     30c:	2f 91       	pop	r18
     30e:	0f 90       	pop	r0
     310:	0b be       	out	0x3b, r0	; 59
     312:	0f 90       	pop	r0
     314:	0f be       	out	0x3f, r0	; 63
     316:	0f 90       	pop	r0
     318:	1f 90       	pop	r1
     31a:	18 95       	reti

0000031c <__vector_15>:
     31c:	1f 92       	push	r1
     31e:	0f 92       	push	r0
     320:	0f b6       	in	r0, 0x3f	; 63
     322:	0f 92       	push	r0
     324:	11 24       	eor	r1, r1
     326:	0b b6       	in	r0, 0x3b	; 59
     328:	0f 92       	push	r0
     32a:	2f 93       	push	r18
     32c:	3f 93       	push	r19
     32e:	4f 93       	push	r20
     330:	5f 93       	push	r21
     332:	6f 93       	push	r22
     334:	7f 93       	push	r23
     336:	8f 93       	push	r24
     338:	9f 93       	push	r25
     33a:	af 93       	push	r26
     33c:	bf 93       	push	r27
     33e:	ef 93       	push	r30
     340:	ff 93       	push	r31
     342:	e0 91 44 20 	lds	r30, 0x2044	; 0x802044 <tc_tcc0_err_callback>
     346:	f0 91 45 20 	lds	r31, 0x2045	; 0x802045 <tc_tcc0_err_callback+0x1>
     34a:	30 97       	sbiw	r30, 0x00	; 0
     34c:	09 f0       	breq	.+2      	; 0x350 <__vector_15+0x34>
     34e:	19 95       	eicall
     350:	ff 91       	pop	r31
     352:	ef 91       	pop	r30
     354:	bf 91       	pop	r27
     356:	af 91       	pop	r26
     358:	9f 91       	pop	r25
     35a:	8f 91       	pop	r24
     35c:	7f 91       	pop	r23
     35e:	6f 91       	pop	r22
     360:	5f 91       	pop	r21
     362:	4f 91       	pop	r20
     364:	3f 91       	pop	r19
     366:	2f 91       	pop	r18
     368:	0f 90       	pop	r0
     36a:	0b be       	out	0x3b, r0	; 59
     36c:	0f 90       	pop	r0
     36e:	0f be       	out	0x3f, r0	; 63
     370:	0f 90       	pop	r0
     372:	1f 90       	pop	r1
     374:	18 95       	reti

00000376 <__vector_16>:
     376:	1f 92       	push	r1
     378:	0f 92       	push	r0
     37a:	0f b6       	in	r0, 0x3f	; 63
     37c:	0f 92       	push	r0
     37e:	11 24       	eor	r1, r1
     380:	0b b6       	in	r0, 0x3b	; 59
     382:	0f 92       	push	r0
     384:	2f 93       	push	r18
     386:	3f 93       	push	r19
     388:	4f 93       	push	r20
     38a:	5f 93       	push	r21
     38c:	6f 93       	push	r22
     38e:	7f 93       	push	r23
     390:	8f 93       	push	r24
     392:	9f 93       	push	r25
     394:	af 93       	push	r26
     396:	bf 93       	push	r27
     398:	ef 93       	push	r30
     39a:	ff 93       	push	r31
     39c:	e0 91 42 20 	lds	r30, 0x2042	; 0x802042 <tc_tcc0_cca_callback>
     3a0:	f0 91 43 20 	lds	r31, 0x2043	; 0x802043 <tc_tcc0_cca_callback+0x1>
     3a4:	30 97       	sbiw	r30, 0x00	; 0
     3a6:	09 f0       	breq	.+2      	; 0x3aa <__vector_16+0x34>
     3a8:	19 95       	eicall
     3aa:	ff 91       	pop	r31
     3ac:	ef 91       	pop	r30
     3ae:	bf 91       	pop	r27
     3b0:	af 91       	pop	r26
     3b2:	9f 91       	pop	r25
     3b4:	8f 91       	pop	r24
     3b6:	7f 91       	pop	r23
     3b8:	6f 91       	pop	r22
     3ba:	5f 91       	pop	r21
     3bc:	4f 91       	pop	r20
     3be:	3f 91       	pop	r19
     3c0:	2f 91       	pop	r18
     3c2:	0f 90       	pop	r0
     3c4:	0b be       	out	0x3b, r0	; 59
     3c6:	0f 90       	pop	r0
     3c8:	0f be       	out	0x3f, r0	; 63
     3ca:	0f 90       	pop	r0
     3cc:	1f 90       	pop	r1
     3ce:	18 95       	reti

000003d0 <__vector_17>:
     3d0:	1f 92       	push	r1
     3d2:	0f 92       	push	r0
     3d4:	0f b6       	in	r0, 0x3f	; 63
     3d6:	0f 92       	push	r0
     3d8:	11 24       	eor	r1, r1
     3da:	0b b6       	in	r0, 0x3b	; 59
     3dc:	0f 92       	push	r0
     3de:	2f 93       	push	r18
     3e0:	3f 93       	push	r19
     3e2:	4f 93       	push	r20
     3e4:	5f 93       	push	r21
     3e6:	6f 93       	push	r22
     3e8:	7f 93       	push	r23
     3ea:	8f 93       	push	r24
     3ec:	9f 93       	push	r25
     3ee:	af 93       	push	r26
     3f0:	bf 93       	push	r27
     3f2:	ef 93       	push	r30
     3f4:	ff 93       	push	r31
     3f6:	e0 91 40 20 	lds	r30, 0x2040	; 0x802040 <tc_tcc0_ccb_callback>
     3fa:	f0 91 41 20 	lds	r31, 0x2041	; 0x802041 <tc_tcc0_ccb_callback+0x1>
     3fe:	30 97       	sbiw	r30, 0x00	; 0
     400:	09 f0       	breq	.+2      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     402:	19 95       	eicall
     404:	ff 91       	pop	r31
     406:	ef 91       	pop	r30
     408:	bf 91       	pop	r27
     40a:	af 91       	pop	r26
     40c:	9f 91       	pop	r25
     40e:	8f 91       	pop	r24
     410:	7f 91       	pop	r23
     412:	6f 91       	pop	r22
     414:	5f 91       	pop	r21
     416:	4f 91       	pop	r20
     418:	3f 91       	pop	r19
     41a:	2f 91       	pop	r18
     41c:	0f 90       	pop	r0
     41e:	0b be       	out	0x3b, r0	; 59
     420:	0f 90       	pop	r0
     422:	0f be       	out	0x3f, r0	; 63
     424:	0f 90       	pop	r0
     426:	1f 90       	pop	r1
     428:	18 95       	reti

0000042a <__vector_18>:
     42a:	1f 92       	push	r1
     42c:	0f 92       	push	r0
     42e:	0f b6       	in	r0, 0x3f	; 63
     430:	0f 92       	push	r0
     432:	11 24       	eor	r1, r1
     434:	0b b6       	in	r0, 0x3b	; 59
     436:	0f 92       	push	r0
     438:	2f 93       	push	r18
     43a:	3f 93       	push	r19
     43c:	4f 93       	push	r20
     43e:	5f 93       	push	r21
     440:	6f 93       	push	r22
     442:	7f 93       	push	r23
     444:	8f 93       	push	r24
     446:	9f 93       	push	r25
     448:	af 93       	push	r26
     44a:	bf 93       	push	r27
     44c:	ef 93       	push	r30
     44e:	ff 93       	push	r31
     450:	e0 91 3e 20 	lds	r30, 0x203E	; 0x80203e <tc_tcc0_ccc_callback>
     454:	f0 91 3f 20 	lds	r31, 0x203F	; 0x80203f <tc_tcc0_ccc_callback+0x1>
     458:	30 97       	sbiw	r30, 0x00	; 0
     45a:	09 f0       	breq	.+2      	; 0x45e <__vector_18+0x34>
     45c:	19 95       	eicall
     45e:	ff 91       	pop	r31
     460:	ef 91       	pop	r30
     462:	bf 91       	pop	r27
     464:	af 91       	pop	r26
     466:	9f 91       	pop	r25
     468:	8f 91       	pop	r24
     46a:	7f 91       	pop	r23
     46c:	6f 91       	pop	r22
     46e:	5f 91       	pop	r21
     470:	4f 91       	pop	r20
     472:	3f 91       	pop	r19
     474:	2f 91       	pop	r18
     476:	0f 90       	pop	r0
     478:	0b be       	out	0x3b, r0	; 59
     47a:	0f 90       	pop	r0
     47c:	0f be       	out	0x3f, r0	; 63
     47e:	0f 90       	pop	r0
     480:	1f 90       	pop	r1
     482:	18 95       	reti

00000484 <__vector_19>:
     484:	1f 92       	push	r1
     486:	0f 92       	push	r0
     488:	0f b6       	in	r0, 0x3f	; 63
     48a:	0f 92       	push	r0
     48c:	11 24       	eor	r1, r1
     48e:	0b b6       	in	r0, 0x3b	; 59
     490:	0f 92       	push	r0
     492:	2f 93       	push	r18
     494:	3f 93       	push	r19
     496:	4f 93       	push	r20
     498:	5f 93       	push	r21
     49a:	6f 93       	push	r22
     49c:	7f 93       	push	r23
     49e:	8f 93       	push	r24
     4a0:	9f 93       	push	r25
     4a2:	af 93       	push	r26
     4a4:	bf 93       	push	r27
     4a6:	ef 93       	push	r30
     4a8:	ff 93       	push	r31
     4aa:	e0 91 3c 20 	lds	r30, 0x203C	; 0x80203c <tc_tcc0_ccd_callback>
     4ae:	f0 91 3d 20 	lds	r31, 0x203D	; 0x80203d <tc_tcc0_ccd_callback+0x1>
     4b2:	30 97       	sbiw	r30, 0x00	; 0
     4b4:	09 f0       	breq	.+2      	; 0x4b8 <__vector_19+0x34>
     4b6:	19 95       	eicall
     4b8:	ff 91       	pop	r31
     4ba:	ef 91       	pop	r30
     4bc:	bf 91       	pop	r27
     4be:	af 91       	pop	r26
     4c0:	9f 91       	pop	r25
     4c2:	8f 91       	pop	r24
     4c4:	7f 91       	pop	r23
     4c6:	6f 91       	pop	r22
     4c8:	5f 91       	pop	r21
     4ca:	4f 91       	pop	r20
     4cc:	3f 91       	pop	r19
     4ce:	2f 91       	pop	r18
     4d0:	0f 90       	pop	r0
     4d2:	0b be       	out	0x3b, r0	; 59
     4d4:	0f 90       	pop	r0
     4d6:	0f be       	out	0x3f, r0	; 63
     4d8:	0f 90       	pop	r0
     4da:	1f 90       	pop	r1
     4dc:	18 95       	reti

000004de <__vector_20>:
     4de:	1f 92       	push	r1
     4e0:	0f 92       	push	r0
     4e2:	0f b6       	in	r0, 0x3f	; 63
     4e4:	0f 92       	push	r0
     4e6:	11 24       	eor	r1, r1
     4e8:	0b b6       	in	r0, 0x3b	; 59
     4ea:	0f 92       	push	r0
     4ec:	2f 93       	push	r18
     4ee:	3f 93       	push	r19
     4f0:	4f 93       	push	r20
     4f2:	5f 93       	push	r21
     4f4:	6f 93       	push	r22
     4f6:	7f 93       	push	r23
     4f8:	8f 93       	push	r24
     4fa:	9f 93       	push	r25
     4fc:	af 93       	push	r26
     4fe:	bf 93       	push	r27
     500:	ef 93       	push	r30
     502:	ff 93       	push	r31
     504:	e0 91 3a 20 	lds	r30, 0x203A	; 0x80203a <tc_tcc1_ovf_callback>
     508:	f0 91 3b 20 	lds	r31, 0x203B	; 0x80203b <tc_tcc1_ovf_callback+0x1>
     50c:	30 97       	sbiw	r30, 0x00	; 0
     50e:	09 f0       	breq	.+2      	; 0x512 <__vector_20+0x34>
     510:	19 95       	eicall
     512:	ff 91       	pop	r31
     514:	ef 91       	pop	r30
     516:	bf 91       	pop	r27
     518:	af 91       	pop	r26
     51a:	9f 91       	pop	r25
     51c:	8f 91       	pop	r24
     51e:	7f 91       	pop	r23
     520:	6f 91       	pop	r22
     522:	5f 91       	pop	r21
     524:	4f 91       	pop	r20
     526:	3f 91       	pop	r19
     528:	2f 91       	pop	r18
     52a:	0f 90       	pop	r0
     52c:	0b be       	out	0x3b, r0	; 59
     52e:	0f 90       	pop	r0
     530:	0f be       	out	0x3f, r0	; 63
     532:	0f 90       	pop	r0
     534:	1f 90       	pop	r1
     536:	18 95       	reti

00000538 <__vector_21>:
     538:	1f 92       	push	r1
     53a:	0f 92       	push	r0
     53c:	0f b6       	in	r0, 0x3f	; 63
     53e:	0f 92       	push	r0
     540:	11 24       	eor	r1, r1
     542:	0b b6       	in	r0, 0x3b	; 59
     544:	0f 92       	push	r0
     546:	2f 93       	push	r18
     548:	3f 93       	push	r19
     54a:	4f 93       	push	r20
     54c:	5f 93       	push	r21
     54e:	6f 93       	push	r22
     550:	7f 93       	push	r23
     552:	8f 93       	push	r24
     554:	9f 93       	push	r25
     556:	af 93       	push	r26
     558:	bf 93       	push	r27
     55a:	ef 93       	push	r30
     55c:	ff 93       	push	r31
     55e:	e0 91 38 20 	lds	r30, 0x2038	; 0x802038 <tc_tcc1_err_callback>
     562:	f0 91 39 20 	lds	r31, 0x2039	; 0x802039 <tc_tcc1_err_callback+0x1>
     566:	30 97       	sbiw	r30, 0x00	; 0
     568:	09 f0       	breq	.+2      	; 0x56c <__vector_21+0x34>
     56a:	19 95       	eicall
     56c:	ff 91       	pop	r31
     56e:	ef 91       	pop	r30
     570:	bf 91       	pop	r27
     572:	af 91       	pop	r26
     574:	9f 91       	pop	r25
     576:	8f 91       	pop	r24
     578:	7f 91       	pop	r23
     57a:	6f 91       	pop	r22
     57c:	5f 91       	pop	r21
     57e:	4f 91       	pop	r20
     580:	3f 91       	pop	r19
     582:	2f 91       	pop	r18
     584:	0f 90       	pop	r0
     586:	0b be       	out	0x3b, r0	; 59
     588:	0f 90       	pop	r0
     58a:	0f be       	out	0x3f, r0	; 63
     58c:	0f 90       	pop	r0
     58e:	1f 90       	pop	r1
     590:	18 95       	reti

00000592 <__vector_22>:
     592:	1f 92       	push	r1
     594:	0f 92       	push	r0
     596:	0f b6       	in	r0, 0x3f	; 63
     598:	0f 92       	push	r0
     59a:	11 24       	eor	r1, r1
     59c:	0b b6       	in	r0, 0x3b	; 59
     59e:	0f 92       	push	r0
     5a0:	2f 93       	push	r18
     5a2:	3f 93       	push	r19
     5a4:	4f 93       	push	r20
     5a6:	5f 93       	push	r21
     5a8:	6f 93       	push	r22
     5aa:	7f 93       	push	r23
     5ac:	8f 93       	push	r24
     5ae:	9f 93       	push	r25
     5b0:	af 93       	push	r26
     5b2:	bf 93       	push	r27
     5b4:	ef 93       	push	r30
     5b6:	ff 93       	push	r31
     5b8:	e0 91 36 20 	lds	r30, 0x2036	; 0x802036 <tc_tcc1_cca_callback>
     5bc:	f0 91 37 20 	lds	r31, 0x2037	; 0x802037 <tc_tcc1_cca_callback+0x1>
     5c0:	30 97       	sbiw	r30, 0x00	; 0
     5c2:	09 f0       	breq	.+2      	; 0x5c6 <__vector_22+0x34>
     5c4:	19 95       	eicall
     5c6:	ff 91       	pop	r31
     5c8:	ef 91       	pop	r30
     5ca:	bf 91       	pop	r27
     5cc:	af 91       	pop	r26
     5ce:	9f 91       	pop	r25
     5d0:	8f 91       	pop	r24
     5d2:	7f 91       	pop	r23
     5d4:	6f 91       	pop	r22
     5d6:	5f 91       	pop	r21
     5d8:	4f 91       	pop	r20
     5da:	3f 91       	pop	r19
     5dc:	2f 91       	pop	r18
     5de:	0f 90       	pop	r0
     5e0:	0b be       	out	0x3b, r0	; 59
     5e2:	0f 90       	pop	r0
     5e4:	0f be       	out	0x3f, r0	; 63
     5e6:	0f 90       	pop	r0
     5e8:	1f 90       	pop	r1
     5ea:	18 95       	reti

000005ec <__vector_23>:
     5ec:	1f 92       	push	r1
     5ee:	0f 92       	push	r0
     5f0:	0f b6       	in	r0, 0x3f	; 63
     5f2:	0f 92       	push	r0
     5f4:	11 24       	eor	r1, r1
     5f6:	0b b6       	in	r0, 0x3b	; 59
     5f8:	0f 92       	push	r0
     5fa:	2f 93       	push	r18
     5fc:	3f 93       	push	r19
     5fe:	4f 93       	push	r20
     600:	5f 93       	push	r21
     602:	6f 93       	push	r22
     604:	7f 93       	push	r23
     606:	8f 93       	push	r24
     608:	9f 93       	push	r25
     60a:	af 93       	push	r26
     60c:	bf 93       	push	r27
     60e:	ef 93       	push	r30
     610:	ff 93       	push	r31
     612:	e0 91 34 20 	lds	r30, 0x2034	; 0x802034 <tc_tcc1_ccb_callback>
     616:	f0 91 35 20 	lds	r31, 0x2035	; 0x802035 <tc_tcc1_ccb_callback+0x1>
     61a:	30 97       	sbiw	r30, 0x00	; 0
     61c:	09 f0       	breq	.+2      	; 0x620 <__vector_23+0x34>
     61e:	19 95       	eicall
     620:	ff 91       	pop	r31
     622:	ef 91       	pop	r30
     624:	bf 91       	pop	r27
     626:	af 91       	pop	r26
     628:	9f 91       	pop	r25
     62a:	8f 91       	pop	r24
     62c:	7f 91       	pop	r23
     62e:	6f 91       	pop	r22
     630:	5f 91       	pop	r21
     632:	4f 91       	pop	r20
     634:	3f 91       	pop	r19
     636:	2f 91       	pop	r18
     638:	0f 90       	pop	r0
     63a:	0b be       	out	0x3b, r0	; 59
     63c:	0f 90       	pop	r0
     63e:	0f be       	out	0x3f, r0	; 63
     640:	0f 90       	pop	r0
     642:	1f 90       	pop	r1
     644:	18 95       	reti

00000646 <__vector_77>:
     646:	1f 92       	push	r1
     648:	0f 92       	push	r0
     64a:	0f b6       	in	r0, 0x3f	; 63
     64c:	0f 92       	push	r0
     64e:	11 24       	eor	r1, r1
     650:	0b b6       	in	r0, 0x3b	; 59
     652:	0f 92       	push	r0
     654:	2f 93       	push	r18
     656:	3f 93       	push	r19
     658:	4f 93       	push	r20
     65a:	5f 93       	push	r21
     65c:	6f 93       	push	r22
     65e:	7f 93       	push	r23
     660:	8f 93       	push	r24
     662:	9f 93       	push	r25
     664:	af 93       	push	r26
     666:	bf 93       	push	r27
     668:	ef 93       	push	r30
     66a:	ff 93       	push	r31
     66c:	e0 91 32 20 	lds	r30, 0x2032	; 0x802032 <tc_tcd0_ovf_callback>
     670:	f0 91 33 20 	lds	r31, 0x2033	; 0x802033 <tc_tcd0_ovf_callback+0x1>
     674:	30 97       	sbiw	r30, 0x00	; 0
     676:	09 f0       	breq	.+2      	; 0x67a <__vector_77+0x34>
     678:	19 95       	eicall
     67a:	ff 91       	pop	r31
     67c:	ef 91       	pop	r30
     67e:	bf 91       	pop	r27
     680:	af 91       	pop	r26
     682:	9f 91       	pop	r25
     684:	8f 91       	pop	r24
     686:	7f 91       	pop	r23
     688:	6f 91       	pop	r22
     68a:	5f 91       	pop	r21
     68c:	4f 91       	pop	r20
     68e:	3f 91       	pop	r19
     690:	2f 91       	pop	r18
     692:	0f 90       	pop	r0
     694:	0b be       	out	0x3b, r0	; 59
     696:	0f 90       	pop	r0
     698:	0f be       	out	0x3f, r0	; 63
     69a:	0f 90       	pop	r0
     69c:	1f 90       	pop	r1
     69e:	18 95       	reti

000006a0 <__vector_78>:
     6a0:	1f 92       	push	r1
     6a2:	0f 92       	push	r0
     6a4:	0f b6       	in	r0, 0x3f	; 63
     6a6:	0f 92       	push	r0
     6a8:	11 24       	eor	r1, r1
     6aa:	0b b6       	in	r0, 0x3b	; 59
     6ac:	0f 92       	push	r0
     6ae:	2f 93       	push	r18
     6b0:	3f 93       	push	r19
     6b2:	4f 93       	push	r20
     6b4:	5f 93       	push	r21
     6b6:	6f 93       	push	r22
     6b8:	7f 93       	push	r23
     6ba:	8f 93       	push	r24
     6bc:	9f 93       	push	r25
     6be:	af 93       	push	r26
     6c0:	bf 93       	push	r27
     6c2:	ef 93       	push	r30
     6c4:	ff 93       	push	r31
     6c6:	e0 91 30 20 	lds	r30, 0x2030	; 0x802030 <tc_tcd0_err_callback>
     6ca:	f0 91 31 20 	lds	r31, 0x2031	; 0x802031 <tc_tcd0_err_callback+0x1>
     6ce:	30 97       	sbiw	r30, 0x00	; 0
     6d0:	09 f0       	breq	.+2      	; 0x6d4 <__vector_78+0x34>
     6d2:	19 95       	eicall
     6d4:	ff 91       	pop	r31
     6d6:	ef 91       	pop	r30
     6d8:	bf 91       	pop	r27
     6da:	af 91       	pop	r26
     6dc:	9f 91       	pop	r25
     6de:	8f 91       	pop	r24
     6e0:	7f 91       	pop	r23
     6e2:	6f 91       	pop	r22
     6e4:	5f 91       	pop	r21
     6e6:	4f 91       	pop	r20
     6e8:	3f 91       	pop	r19
     6ea:	2f 91       	pop	r18
     6ec:	0f 90       	pop	r0
     6ee:	0b be       	out	0x3b, r0	; 59
     6f0:	0f 90       	pop	r0
     6f2:	0f be       	out	0x3f, r0	; 63
     6f4:	0f 90       	pop	r0
     6f6:	1f 90       	pop	r1
     6f8:	18 95       	reti

000006fa <__vector_79>:
     6fa:	1f 92       	push	r1
     6fc:	0f 92       	push	r0
     6fe:	0f b6       	in	r0, 0x3f	; 63
     700:	0f 92       	push	r0
     702:	11 24       	eor	r1, r1
     704:	0b b6       	in	r0, 0x3b	; 59
     706:	0f 92       	push	r0
     708:	2f 93       	push	r18
     70a:	3f 93       	push	r19
     70c:	4f 93       	push	r20
     70e:	5f 93       	push	r21
     710:	6f 93       	push	r22
     712:	7f 93       	push	r23
     714:	8f 93       	push	r24
     716:	9f 93       	push	r25
     718:	af 93       	push	r26
     71a:	bf 93       	push	r27
     71c:	ef 93       	push	r30
     71e:	ff 93       	push	r31
     720:	e0 91 2e 20 	lds	r30, 0x202E	; 0x80202e <tc_tcd0_cca_callback>
     724:	f0 91 2f 20 	lds	r31, 0x202F	; 0x80202f <tc_tcd0_cca_callback+0x1>
     728:	30 97       	sbiw	r30, 0x00	; 0
     72a:	09 f0       	breq	.+2      	; 0x72e <__vector_79+0x34>
     72c:	19 95       	eicall
     72e:	ff 91       	pop	r31
     730:	ef 91       	pop	r30
     732:	bf 91       	pop	r27
     734:	af 91       	pop	r26
     736:	9f 91       	pop	r25
     738:	8f 91       	pop	r24
     73a:	7f 91       	pop	r23
     73c:	6f 91       	pop	r22
     73e:	5f 91       	pop	r21
     740:	4f 91       	pop	r20
     742:	3f 91       	pop	r19
     744:	2f 91       	pop	r18
     746:	0f 90       	pop	r0
     748:	0b be       	out	0x3b, r0	; 59
     74a:	0f 90       	pop	r0
     74c:	0f be       	out	0x3f, r0	; 63
     74e:	0f 90       	pop	r0
     750:	1f 90       	pop	r1
     752:	18 95       	reti

00000754 <__vector_80>:
     754:	1f 92       	push	r1
     756:	0f 92       	push	r0
     758:	0f b6       	in	r0, 0x3f	; 63
     75a:	0f 92       	push	r0
     75c:	11 24       	eor	r1, r1
     75e:	0b b6       	in	r0, 0x3b	; 59
     760:	0f 92       	push	r0
     762:	2f 93       	push	r18
     764:	3f 93       	push	r19
     766:	4f 93       	push	r20
     768:	5f 93       	push	r21
     76a:	6f 93       	push	r22
     76c:	7f 93       	push	r23
     76e:	8f 93       	push	r24
     770:	9f 93       	push	r25
     772:	af 93       	push	r26
     774:	bf 93       	push	r27
     776:	ef 93       	push	r30
     778:	ff 93       	push	r31
     77a:	e0 91 2c 20 	lds	r30, 0x202C	; 0x80202c <tc_tcd0_ccb_callback>
     77e:	f0 91 2d 20 	lds	r31, 0x202D	; 0x80202d <tc_tcd0_ccb_callback+0x1>
     782:	30 97       	sbiw	r30, 0x00	; 0
     784:	09 f0       	breq	.+2      	; 0x788 <__vector_80+0x34>
     786:	19 95       	eicall
     788:	ff 91       	pop	r31
     78a:	ef 91       	pop	r30
     78c:	bf 91       	pop	r27
     78e:	af 91       	pop	r26
     790:	9f 91       	pop	r25
     792:	8f 91       	pop	r24
     794:	7f 91       	pop	r23
     796:	6f 91       	pop	r22
     798:	5f 91       	pop	r21
     79a:	4f 91       	pop	r20
     79c:	3f 91       	pop	r19
     79e:	2f 91       	pop	r18
     7a0:	0f 90       	pop	r0
     7a2:	0b be       	out	0x3b, r0	; 59
     7a4:	0f 90       	pop	r0
     7a6:	0f be       	out	0x3f, r0	; 63
     7a8:	0f 90       	pop	r0
     7aa:	1f 90       	pop	r1
     7ac:	18 95       	reti

000007ae <__vector_81>:
     7ae:	1f 92       	push	r1
     7b0:	0f 92       	push	r0
     7b2:	0f b6       	in	r0, 0x3f	; 63
     7b4:	0f 92       	push	r0
     7b6:	11 24       	eor	r1, r1
     7b8:	0b b6       	in	r0, 0x3b	; 59
     7ba:	0f 92       	push	r0
     7bc:	2f 93       	push	r18
     7be:	3f 93       	push	r19
     7c0:	4f 93       	push	r20
     7c2:	5f 93       	push	r21
     7c4:	6f 93       	push	r22
     7c6:	7f 93       	push	r23
     7c8:	8f 93       	push	r24
     7ca:	9f 93       	push	r25
     7cc:	af 93       	push	r26
     7ce:	bf 93       	push	r27
     7d0:	ef 93       	push	r30
     7d2:	ff 93       	push	r31
     7d4:	e0 91 2a 20 	lds	r30, 0x202A	; 0x80202a <tc_tcd0_ccc_callback>
     7d8:	f0 91 2b 20 	lds	r31, 0x202B	; 0x80202b <tc_tcd0_ccc_callback+0x1>
     7dc:	30 97       	sbiw	r30, 0x00	; 0
     7de:	09 f0       	breq	.+2      	; 0x7e2 <__vector_81+0x34>
     7e0:	19 95       	eicall
     7e2:	ff 91       	pop	r31
     7e4:	ef 91       	pop	r30
     7e6:	bf 91       	pop	r27
     7e8:	af 91       	pop	r26
     7ea:	9f 91       	pop	r25
     7ec:	8f 91       	pop	r24
     7ee:	7f 91       	pop	r23
     7f0:	6f 91       	pop	r22
     7f2:	5f 91       	pop	r21
     7f4:	4f 91       	pop	r20
     7f6:	3f 91       	pop	r19
     7f8:	2f 91       	pop	r18
     7fa:	0f 90       	pop	r0
     7fc:	0b be       	out	0x3b, r0	; 59
     7fe:	0f 90       	pop	r0
     800:	0f be       	out	0x3f, r0	; 63
     802:	0f 90       	pop	r0
     804:	1f 90       	pop	r1
     806:	18 95       	reti

00000808 <__vector_82>:
     808:	1f 92       	push	r1
     80a:	0f 92       	push	r0
     80c:	0f b6       	in	r0, 0x3f	; 63
     80e:	0f 92       	push	r0
     810:	11 24       	eor	r1, r1
     812:	0b b6       	in	r0, 0x3b	; 59
     814:	0f 92       	push	r0
     816:	2f 93       	push	r18
     818:	3f 93       	push	r19
     81a:	4f 93       	push	r20
     81c:	5f 93       	push	r21
     81e:	6f 93       	push	r22
     820:	7f 93       	push	r23
     822:	8f 93       	push	r24
     824:	9f 93       	push	r25
     826:	af 93       	push	r26
     828:	bf 93       	push	r27
     82a:	ef 93       	push	r30
     82c:	ff 93       	push	r31
     82e:	e0 91 28 20 	lds	r30, 0x2028	; 0x802028 <tc_tcd0_ccd_callback>
     832:	f0 91 29 20 	lds	r31, 0x2029	; 0x802029 <tc_tcd0_ccd_callback+0x1>
     836:	30 97       	sbiw	r30, 0x00	; 0
     838:	09 f0       	breq	.+2      	; 0x83c <__vector_82+0x34>
     83a:	19 95       	eicall
     83c:	ff 91       	pop	r31
     83e:	ef 91       	pop	r30
     840:	bf 91       	pop	r27
     842:	af 91       	pop	r26
     844:	9f 91       	pop	r25
     846:	8f 91       	pop	r24
     848:	7f 91       	pop	r23
     84a:	6f 91       	pop	r22
     84c:	5f 91       	pop	r21
     84e:	4f 91       	pop	r20
     850:	3f 91       	pop	r19
     852:	2f 91       	pop	r18
     854:	0f 90       	pop	r0
     856:	0b be       	out	0x3b, r0	; 59
     858:	0f 90       	pop	r0
     85a:	0f be       	out	0x3f, r0	; 63
     85c:	0f 90       	pop	r0
     85e:	1f 90       	pop	r1
     860:	18 95       	reti

00000862 <__vector_83>:
     862:	1f 92       	push	r1
     864:	0f 92       	push	r0
     866:	0f b6       	in	r0, 0x3f	; 63
     868:	0f 92       	push	r0
     86a:	11 24       	eor	r1, r1
     86c:	0b b6       	in	r0, 0x3b	; 59
     86e:	0f 92       	push	r0
     870:	2f 93       	push	r18
     872:	3f 93       	push	r19
     874:	4f 93       	push	r20
     876:	5f 93       	push	r21
     878:	6f 93       	push	r22
     87a:	7f 93       	push	r23
     87c:	8f 93       	push	r24
     87e:	9f 93       	push	r25
     880:	af 93       	push	r26
     882:	bf 93       	push	r27
     884:	ef 93       	push	r30
     886:	ff 93       	push	r31
     888:	e0 91 26 20 	lds	r30, 0x2026	; 0x802026 <tc_tcd1_ovf_callback>
     88c:	f0 91 27 20 	lds	r31, 0x2027	; 0x802027 <tc_tcd1_ovf_callback+0x1>
     890:	30 97       	sbiw	r30, 0x00	; 0
     892:	09 f0       	breq	.+2      	; 0x896 <__vector_83+0x34>
     894:	19 95       	eicall
     896:	ff 91       	pop	r31
     898:	ef 91       	pop	r30
     89a:	bf 91       	pop	r27
     89c:	af 91       	pop	r26
     89e:	9f 91       	pop	r25
     8a0:	8f 91       	pop	r24
     8a2:	7f 91       	pop	r23
     8a4:	6f 91       	pop	r22
     8a6:	5f 91       	pop	r21
     8a8:	4f 91       	pop	r20
     8aa:	3f 91       	pop	r19
     8ac:	2f 91       	pop	r18
     8ae:	0f 90       	pop	r0
     8b0:	0b be       	out	0x3b, r0	; 59
     8b2:	0f 90       	pop	r0
     8b4:	0f be       	out	0x3f, r0	; 63
     8b6:	0f 90       	pop	r0
     8b8:	1f 90       	pop	r1
     8ba:	18 95       	reti

000008bc <__vector_84>:
     8bc:	1f 92       	push	r1
     8be:	0f 92       	push	r0
     8c0:	0f b6       	in	r0, 0x3f	; 63
     8c2:	0f 92       	push	r0
     8c4:	11 24       	eor	r1, r1
     8c6:	0b b6       	in	r0, 0x3b	; 59
     8c8:	0f 92       	push	r0
     8ca:	2f 93       	push	r18
     8cc:	3f 93       	push	r19
     8ce:	4f 93       	push	r20
     8d0:	5f 93       	push	r21
     8d2:	6f 93       	push	r22
     8d4:	7f 93       	push	r23
     8d6:	8f 93       	push	r24
     8d8:	9f 93       	push	r25
     8da:	af 93       	push	r26
     8dc:	bf 93       	push	r27
     8de:	ef 93       	push	r30
     8e0:	ff 93       	push	r31
     8e2:	e0 91 24 20 	lds	r30, 0x2024	; 0x802024 <tc_tcd1_err_callback>
     8e6:	f0 91 25 20 	lds	r31, 0x2025	; 0x802025 <tc_tcd1_err_callback+0x1>
     8ea:	30 97       	sbiw	r30, 0x00	; 0
     8ec:	09 f0       	breq	.+2      	; 0x8f0 <__vector_84+0x34>
     8ee:	19 95       	eicall
     8f0:	ff 91       	pop	r31
     8f2:	ef 91       	pop	r30
     8f4:	bf 91       	pop	r27
     8f6:	af 91       	pop	r26
     8f8:	9f 91       	pop	r25
     8fa:	8f 91       	pop	r24
     8fc:	7f 91       	pop	r23
     8fe:	6f 91       	pop	r22
     900:	5f 91       	pop	r21
     902:	4f 91       	pop	r20
     904:	3f 91       	pop	r19
     906:	2f 91       	pop	r18
     908:	0f 90       	pop	r0
     90a:	0b be       	out	0x3b, r0	; 59
     90c:	0f 90       	pop	r0
     90e:	0f be       	out	0x3f, r0	; 63
     910:	0f 90       	pop	r0
     912:	1f 90       	pop	r1
     914:	18 95       	reti

00000916 <__vector_85>:
     916:	1f 92       	push	r1
     918:	0f 92       	push	r0
     91a:	0f b6       	in	r0, 0x3f	; 63
     91c:	0f 92       	push	r0
     91e:	11 24       	eor	r1, r1
     920:	0b b6       	in	r0, 0x3b	; 59
     922:	0f 92       	push	r0
     924:	2f 93       	push	r18
     926:	3f 93       	push	r19
     928:	4f 93       	push	r20
     92a:	5f 93       	push	r21
     92c:	6f 93       	push	r22
     92e:	7f 93       	push	r23
     930:	8f 93       	push	r24
     932:	9f 93       	push	r25
     934:	af 93       	push	r26
     936:	bf 93       	push	r27
     938:	ef 93       	push	r30
     93a:	ff 93       	push	r31
     93c:	e0 91 22 20 	lds	r30, 0x2022	; 0x802022 <tc_tcd1_cca_callback>
     940:	f0 91 23 20 	lds	r31, 0x2023	; 0x802023 <tc_tcd1_cca_callback+0x1>
     944:	30 97       	sbiw	r30, 0x00	; 0
     946:	09 f0       	breq	.+2      	; 0x94a <__vector_85+0x34>
     948:	19 95       	eicall
     94a:	ff 91       	pop	r31
     94c:	ef 91       	pop	r30
     94e:	bf 91       	pop	r27
     950:	af 91       	pop	r26
     952:	9f 91       	pop	r25
     954:	8f 91       	pop	r24
     956:	7f 91       	pop	r23
     958:	6f 91       	pop	r22
     95a:	5f 91       	pop	r21
     95c:	4f 91       	pop	r20
     95e:	3f 91       	pop	r19
     960:	2f 91       	pop	r18
     962:	0f 90       	pop	r0
     964:	0b be       	out	0x3b, r0	; 59
     966:	0f 90       	pop	r0
     968:	0f be       	out	0x3f, r0	; 63
     96a:	0f 90       	pop	r0
     96c:	1f 90       	pop	r1
     96e:	18 95       	reti

00000970 <__vector_86>:
     970:	1f 92       	push	r1
     972:	0f 92       	push	r0
     974:	0f b6       	in	r0, 0x3f	; 63
     976:	0f 92       	push	r0
     978:	11 24       	eor	r1, r1
     97a:	0b b6       	in	r0, 0x3b	; 59
     97c:	0f 92       	push	r0
     97e:	2f 93       	push	r18
     980:	3f 93       	push	r19
     982:	4f 93       	push	r20
     984:	5f 93       	push	r21
     986:	6f 93       	push	r22
     988:	7f 93       	push	r23
     98a:	8f 93       	push	r24
     98c:	9f 93       	push	r25
     98e:	af 93       	push	r26
     990:	bf 93       	push	r27
     992:	ef 93       	push	r30
     994:	ff 93       	push	r31
     996:	e0 91 20 20 	lds	r30, 0x2020	; 0x802020 <tc_tcd1_ccb_callback>
     99a:	f0 91 21 20 	lds	r31, 0x2021	; 0x802021 <tc_tcd1_ccb_callback+0x1>
     99e:	30 97       	sbiw	r30, 0x00	; 0
     9a0:	09 f0       	breq	.+2      	; 0x9a4 <__vector_86+0x34>
     9a2:	19 95       	eicall
     9a4:	ff 91       	pop	r31
     9a6:	ef 91       	pop	r30
     9a8:	bf 91       	pop	r27
     9aa:	af 91       	pop	r26
     9ac:	9f 91       	pop	r25
     9ae:	8f 91       	pop	r24
     9b0:	7f 91       	pop	r23
     9b2:	6f 91       	pop	r22
     9b4:	5f 91       	pop	r21
     9b6:	4f 91       	pop	r20
     9b8:	3f 91       	pop	r19
     9ba:	2f 91       	pop	r18
     9bc:	0f 90       	pop	r0
     9be:	0b be       	out	0x3b, r0	; 59
     9c0:	0f 90       	pop	r0
     9c2:	0f be       	out	0x3f, r0	; 63
     9c4:	0f 90       	pop	r0
     9c6:	1f 90       	pop	r1
     9c8:	18 95       	reti

000009ca <__vector_47>:
     9ca:	1f 92       	push	r1
     9cc:	0f 92       	push	r0
     9ce:	0f b6       	in	r0, 0x3f	; 63
     9d0:	0f 92       	push	r0
     9d2:	11 24       	eor	r1, r1
     9d4:	0b b6       	in	r0, 0x3b	; 59
     9d6:	0f 92       	push	r0
     9d8:	2f 93       	push	r18
     9da:	3f 93       	push	r19
     9dc:	4f 93       	push	r20
     9de:	5f 93       	push	r21
     9e0:	6f 93       	push	r22
     9e2:	7f 93       	push	r23
     9e4:	8f 93       	push	r24
     9e6:	9f 93       	push	r25
     9e8:	af 93       	push	r26
     9ea:	bf 93       	push	r27
     9ec:	ef 93       	push	r30
     9ee:	ff 93       	push	r31
     9f0:	e0 91 1e 20 	lds	r30, 0x201E	; 0x80201e <tc_tce0_ovf_callback>
     9f4:	f0 91 1f 20 	lds	r31, 0x201F	; 0x80201f <tc_tce0_ovf_callback+0x1>
     9f8:	30 97       	sbiw	r30, 0x00	; 0
     9fa:	09 f0       	breq	.+2      	; 0x9fe <__vector_47+0x34>
     9fc:	19 95       	eicall
     9fe:	ff 91       	pop	r31
     a00:	ef 91       	pop	r30
     a02:	bf 91       	pop	r27
     a04:	af 91       	pop	r26
     a06:	9f 91       	pop	r25
     a08:	8f 91       	pop	r24
     a0a:	7f 91       	pop	r23
     a0c:	6f 91       	pop	r22
     a0e:	5f 91       	pop	r21
     a10:	4f 91       	pop	r20
     a12:	3f 91       	pop	r19
     a14:	2f 91       	pop	r18
     a16:	0f 90       	pop	r0
     a18:	0b be       	out	0x3b, r0	; 59
     a1a:	0f 90       	pop	r0
     a1c:	0f be       	out	0x3f, r0	; 63
     a1e:	0f 90       	pop	r0
     a20:	1f 90       	pop	r1
     a22:	18 95       	reti

00000a24 <__vector_48>:
     a24:	1f 92       	push	r1
     a26:	0f 92       	push	r0
     a28:	0f b6       	in	r0, 0x3f	; 63
     a2a:	0f 92       	push	r0
     a2c:	11 24       	eor	r1, r1
     a2e:	0b b6       	in	r0, 0x3b	; 59
     a30:	0f 92       	push	r0
     a32:	2f 93       	push	r18
     a34:	3f 93       	push	r19
     a36:	4f 93       	push	r20
     a38:	5f 93       	push	r21
     a3a:	6f 93       	push	r22
     a3c:	7f 93       	push	r23
     a3e:	8f 93       	push	r24
     a40:	9f 93       	push	r25
     a42:	af 93       	push	r26
     a44:	bf 93       	push	r27
     a46:	ef 93       	push	r30
     a48:	ff 93       	push	r31
     a4a:	e0 91 1c 20 	lds	r30, 0x201C	; 0x80201c <tc_tce0_err_callback>
     a4e:	f0 91 1d 20 	lds	r31, 0x201D	; 0x80201d <tc_tce0_err_callback+0x1>
     a52:	30 97       	sbiw	r30, 0x00	; 0
     a54:	09 f0       	breq	.+2      	; 0xa58 <__vector_48+0x34>
     a56:	19 95       	eicall
     a58:	ff 91       	pop	r31
     a5a:	ef 91       	pop	r30
     a5c:	bf 91       	pop	r27
     a5e:	af 91       	pop	r26
     a60:	9f 91       	pop	r25
     a62:	8f 91       	pop	r24
     a64:	7f 91       	pop	r23
     a66:	6f 91       	pop	r22
     a68:	5f 91       	pop	r21
     a6a:	4f 91       	pop	r20
     a6c:	3f 91       	pop	r19
     a6e:	2f 91       	pop	r18
     a70:	0f 90       	pop	r0
     a72:	0b be       	out	0x3b, r0	; 59
     a74:	0f 90       	pop	r0
     a76:	0f be       	out	0x3f, r0	; 63
     a78:	0f 90       	pop	r0
     a7a:	1f 90       	pop	r1
     a7c:	18 95       	reti

00000a7e <__vector_49>:
     a7e:	1f 92       	push	r1
     a80:	0f 92       	push	r0
     a82:	0f b6       	in	r0, 0x3f	; 63
     a84:	0f 92       	push	r0
     a86:	11 24       	eor	r1, r1
     a88:	0b b6       	in	r0, 0x3b	; 59
     a8a:	0f 92       	push	r0
     a8c:	2f 93       	push	r18
     a8e:	3f 93       	push	r19
     a90:	4f 93       	push	r20
     a92:	5f 93       	push	r21
     a94:	6f 93       	push	r22
     a96:	7f 93       	push	r23
     a98:	8f 93       	push	r24
     a9a:	9f 93       	push	r25
     a9c:	af 93       	push	r26
     a9e:	bf 93       	push	r27
     aa0:	ef 93       	push	r30
     aa2:	ff 93       	push	r31
     aa4:	e0 91 1a 20 	lds	r30, 0x201A	; 0x80201a <tc_tce0_cca_callback>
     aa8:	f0 91 1b 20 	lds	r31, 0x201B	; 0x80201b <tc_tce0_cca_callback+0x1>
     aac:	30 97       	sbiw	r30, 0x00	; 0
     aae:	09 f0       	breq	.+2      	; 0xab2 <__vector_49+0x34>
     ab0:	19 95       	eicall
     ab2:	ff 91       	pop	r31
     ab4:	ef 91       	pop	r30
     ab6:	bf 91       	pop	r27
     ab8:	af 91       	pop	r26
     aba:	9f 91       	pop	r25
     abc:	8f 91       	pop	r24
     abe:	7f 91       	pop	r23
     ac0:	6f 91       	pop	r22
     ac2:	5f 91       	pop	r21
     ac4:	4f 91       	pop	r20
     ac6:	3f 91       	pop	r19
     ac8:	2f 91       	pop	r18
     aca:	0f 90       	pop	r0
     acc:	0b be       	out	0x3b, r0	; 59
     ace:	0f 90       	pop	r0
     ad0:	0f be       	out	0x3f, r0	; 63
     ad2:	0f 90       	pop	r0
     ad4:	1f 90       	pop	r1
     ad6:	18 95       	reti

00000ad8 <__vector_50>:
     ad8:	1f 92       	push	r1
     ada:	0f 92       	push	r0
     adc:	0f b6       	in	r0, 0x3f	; 63
     ade:	0f 92       	push	r0
     ae0:	11 24       	eor	r1, r1
     ae2:	0b b6       	in	r0, 0x3b	; 59
     ae4:	0f 92       	push	r0
     ae6:	2f 93       	push	r18
     ae8:	3f 93       	push	r19
     aea:	4f 93       	push	r20
     aec:	5f 93       	push	r21
     aee:	6f 93       	push	r22
     af0:	7f 93       	push	r23
     af2:	8f 93       	push	r24
     af4:	9f 93       	push	r25
     af6:	af 93       	push	r26
     af8:	bf 93       	push	r27
     afa:	ef 93       	push	r30
     afc:	ff 93       	push	r31
     afe:	e0 91 18 20 	lds	r30, 0x2018	; 0x802018 <tc_tce0_ccb_callback>
     b02:	f0 91 19 20 	lds	r31, 0x2019	; 0x802019 <tc_tce0_ccb_callback+0x1>
     b06:	30 97       	sbiw	r30, 0x00	; 0
     b08:	09 f0       	breq	.+2      	; 0xb0c <__vector_50+0x34>
     b0a:	19 95       	eicall
     b0c:	ff 91       	pop	r31
     b0e:	ef 91       	pop	r30
     b10:	bf 91       	pop	r27
     b12:	af 91       	pop	r26
     b14:	9f 91       	pop	r25
     b16:	8f 91       	pop	r24
     b18:	7f 91       	pop	r23
     b1a:	6f 91       	pop	r22
     b1c:	5f 91       	pop	r21
     b1e:	4f 91       	pop	r20
     b20:	3f 91       	pop	r19
     b22:	2f 91       	pop	r18
     b24:	0f 90       	pop	r0
     b26:	0b be       	out	0x3b, r0	; 59
     b28:	0f 90       	pop	r0
     b2a:	0f be       	out	0x3f, r0	; 63
     b2c:	0f 90       	pop	r0
     b2e:	1f 90       	pop	r1
     b30:	18 95       	reti

00000b32 <__vector_51>:
     b32:	1f 92       	push	r1
     b34:	0f 92       	push	r0
     b36:	0f b6       	in	r0, 0x3f	; 63
     b38:	0f 92       	push	r0
     b3a:	11 24       	eor	r1, r1
     b3c:	0b b6       	in	r0, 0x3b	; 59
     b3e:	0f 92       	push	r0
     b40:	2f 93       	push	r18
     b42:	3f 93       	push	r19
     b44:	4f 93       	push	r20
     b46:	5f 93       	push	r21
     b48:	6f 93       	push	r22
     b4a:	7f 93       	push	r23
     b4c:	8f 93       	push	r24
     b4e:	9f 93       	push	r25
     b50:	af 93       	push	r26
     b52:	bf 93       	push	r27
     b54:	ef 93       	push	r30
     b56:	ff 93       	push	r31
     b58:	e0 91 16 20 	lds	r30, 0x2016	; 0x802016 <tc_tce0_ccc_callback>
     b5c:	f0 91 17 20 	lds	r31, 0x2017	; 0x802017 <tc_tce0_ccc_callback+0x1>
     b60:	30 97       	sbiw	r30, 0x00	; 0
     b62:	09 f0       	breq	.+2      	; 0xb66 <__vector_51+0x34>
     b64:	19 95       	eicall
     b66:	ff 91       	pop	r31
     b68:	ef 91       	pop	r30
     b6a:	bf 91       	pop	r27
     b6c:	af 91       	pop	r26
     b6e:	9f 91       	pop	r25
     b70:	8f 91       	pop	r24
     b72:	7f 91       	pop	r23
     b74:	6f 91       	pop	r22
     b76:	5f 91       	pop	r21
     b78:	4f 91       	pop	r20
     b7a:	3f 91       	pop	r19
     b7c:	2f 91       	pop	r18
     b7e:	0f 90       	pop	r0
     b80:	0b be       	out	0x3b, r0	; 59
     b82:	0f 90       	pop	r0
     b84:	0f be       	out	0x3f, r0	; 63
     b86:	0f 90       	pop	r0
     b88:	1f 90       	pop	r1
     b8a:	18 95       	reti

00000b8c <__vector_52>:
     b8c:	1f 92       	push	r1
     b8e:	0f 92       	push	r0
     b90:	0f b6       	in	r0, 0x3f	; 63
     b92:	0f 92       	push	r0
     b94:	11 24       	eor	r1, r1
     b96:	0b b6       	in	r0, 0x3b	; 59
     b98:	0f 92       	push	r0
     b9a:	2f 93       	push	r18
     b9c:	3f 93       	push	r19
     b9e:	4f 93       	push	r20
     ba0:	5f 93       	push	r21
     ba2:	6f 93       	push	r22
     ba4:	7f 93       	push	r23
     ba6:	8f 93       	push	r24
     ba8:	9f 93       	push	r25
     baa:	af 93       	push	r26
     bac:	bf 93       	push	r27
     bae:	ef 93       	push	r30
     bb0:	ff 93       	push	r31
     bb2:	e0 91 14 20 	lds	r30, 0x2014	; 0x802014 <tc_tce0_ccd_callback>
     bb6:	f0 91 15 20 	lds	r31, 0x2015	; 0x802015 <tc_tce0_ccd_callback+0x1>
     bba:	30 97       	sbiw	r30, 0x00	; 0
     bbc:	09 f0       	breq	.+2      	; 0xbc0 <__vector_52+0x34>
     bbe:	19 95       	eicall
     bc0:	ff 91       	pop	r31
     bc2:	ef 91       	pop	r30
     bc4:	bf 91       	pop	r27
     bc6:	af 91       	pop	r26
     bc8:	9f 91       	pop	r25
     bca:	8f 91       	pop	r24
     bcc:	7f 91       	pop	r23
     bce:	6f 91       	pop	r22
     bd0:	5f 91       	pop	r21
     bd2:	4f 91       	pop	r20
     bd4:	3f 91       	pop	r19
     bd6:	2f 91       	pop	r18
     bd8:	0f 90       	pop	r0
     bda:	0b be       	out	0x3b, r0	; 59
     bdc:	0f 90       	pop	r0
     bde:	0f be       	out	0x3f, r0	; 63
     be0:	0f 90       	pop	r0
     be2:	1f 90       	pop	r1
     be4:	18 95       	reti

00000be6 <__vector_53>:
     be6:	1f 92       	push	r1
     be8:	0f 92       	push	r0
     bea:	0f b6       	in	r0, 0x3f	; 63
     bec:	0f 92       	push	r0
     bee:	11 24       	eor	r1, r1
     bf0:	0b b6       	in	r0, 0x3b	; 59
     bf2:	0f 92       	push	r0
     bf4:	2f 93       	push	r18
     bf6:	3f 93       	push	r19
     bf8:	4f 93       	push	r20
     bfa:	5f 93       	push	r21
     bfc:	6f 93       	push	r22
     bfe:	7f 93       	push	r23
     c00:	8f 93       	push	r24
     c02:	9f 93       	push	r25
     c04:	af 93       	push	r26
     c06:	bf 93       	push	r27
     c08:	ef 93       	push	r30
     c0a:	ff 93       	push	r31
     c0c:	e0 91 12 20 	lds	r30, 0x2012	; 0x802012 <tc_tce1_ovf_callback>
     c10:	f0 91 13 20 	lds	r31, 0x2013	; 0x802013 <tc_tce1_ovf_callback+0x1>
     c14:	30 97       	sbiw	r30, 0x00	; 0
     c16:	09 f0       	breq	.+2      	; 0xc1a <__vector_53+0x34>
     c18:	19 95       	eicall
     c1a:	ff 91       	pop	r31
     c1c:	ef 91       	pop	r30
     c1e:	bf 91       	pop	r27
     c20:	af 91       	pop	r26
     c22:	9f 91       	pop	r25
     c24:	8f 91       	pop	r24
     c26:	7f 91       	pop	r23
     c28:	6f 91       	pop	r22
     c2a:	5f 91       	pop	r21
     c2c:	4f 91       	pop	r20
     c2e:	3f 91       	pop	r19
     c30:	2f 91       	pop	r18
     c32:	0f 90       	pop	r0
     c34:	0b be       	out	0x3b, r0	; 59
     c36:	0f 90       	pop	r0
     c38:	0f be       	out	0x3f, r0	; 63
     c3a:	0f 90       	pop	r0
     c3c:	1f 90       	pop	r1
     c3e:	18 95       	reti

00000c40 <__vector_54>:
     c40:	1f 92       	push	r1
     c42:	0f 92       	push	r0
     c44:	0f b6       	in	r0, 0x3f	; 63
     c46:	0f 92       	push	r0
     c48:	11 24       	eor	r1, r1
     c4a:	0b b6       	in	r0, 0x3b	; 59
     c4c:	0f 92       	push	r0
     c4e:	2f 93       	push	r18
     c50:	3f 93       	push	r19
     c52:	4f 93       	push	r20
     c54:	5f 93       	push	r21
     c56:	6f 93       	push	r22
     c58:	7f 93       	push	r23
     c5a:	8f 93       	push	r24
     c5c:	9f 93       	push	r25
     c5e:	af 93       	push	r26
     c60:	bf 93       	push	r27
     c62:	ef 93       	push	r30
     c64:	ff 93       	push	r31
     c66:	e0 91 10 20 	lds	r30, 0x2010	; 0x802010 <tc_tce1_err_callback>
     c6a:	f0 91 11 20 	lds	r31, 0x2011	; 0x802011 <tc_tce1_err_callback+0x1>
     c6e:	30 97       	sbiw	r30, 0x00	; 0
     c70:	09 f0       	breq	.+2      	; 0xc74 <__vector_54+0x34>
     c72:	19 95       	eicall
     c74:	ff 91       	pop	r31
     c76:	ef 91       	pop	r30
     c78:	bf 91       	pop	r27
     c7a:	af 91       	pop	r26
     c7c:	9f 91       	pop	r25
     c7e:	8f 91       	pop	r24
     c80:	7f 91       	pop	r23
     c82:	6f 91       	pop	r22
     c84:	5f 91       	pop	r21
     c86:	4f 91       	pop	r20
     c88:	3f 91       	pop	r19
     c8a:	2f 91       	pop	r18
     c8c:	0f 90       	pop	r0
     c8e:	0b be       	out	0x3b, r0	; 59
     c90:	0f 90       	pop	r0
     c92:	0f be       	out	0x3f, r0	; 63
     c94:	0f 90       	pop	r0
     c96:	1f 90       	pop	r1
     c98:	18 95       	reti

00000c9a <__vector_55>:
     c9a:	1f 92       	push	r1
     c9c:	0f 92       	push	r0
     c9e:	0f b6       	in	r0, 0x3f	; 63
     ca0:	0f 92       	push	r0
     ca2:	11 24       	eor	r1, r1
     ca4:	0b b6       	in	r0, 0x3b	; 59
     ca6:	0f 92       	push	r0
     ca8:	2f 93       	push	r18
     caa:	3f 93       	push	r19
     cac:	4f 93       	push	r20
     cae:	5f 93       	push	r21
     cb0:	6f 93       	push	r22
     cb2:	7f 93       	push	r23
     cb4:	8f 93       	push	r24
     cb6:	9f 93       	push	r25
     cb8:	af 93       	push	r26
     cba:	bf 93       	push	r27
     cbc:	ef 93       	push	r30
     cbe:	ff 93       	push	r31
     cc0:	e0 91 0e 20 	lds	r30, 0x200E	; 0x80200e <tc_tce1_cca_callback>
     cc4:	f0 91 0f 20 	lds	r31, 0x200F	; 0x80200f <tc_tce1_cca_callback+0x1>
     cc8:	30 97       	sbiw	r30, 0x00	; 0
     cca:	09 f0       	breq	.+2      	; 0xcce <__vector_55+0x34>
     ccc:	19 95       	eicall
     cce:	ff 91       	pop	r31
     cd0:	ef 91       	pop	r30
     cd2:	bf 91       	pop	r27
     cd4:	af 91       	pop	r26
     cd6:	9f 91       	pop	r25
     cd8:	8f 91       	pop	r24
     cda:	7f 91       	pop	r23
     cdc:	6f 91       	pop	r22
     cde:	5f 91       	pop	r21
     ce0:	4f 91       	pop	r20
     ce2:	3f 91       	pop	r19
     ce4:	2f 91       	pop	r18
     ce6:	0f 90       	pop	r0
     ce8:	0b be       	out	0x3b, r0	; 59
     cea:	0f 90       	pop	r0
     cec:	0f be       	out	0x3f, r0	; 63
     cee:	0f 90       	pop	r0
     cf0:	1f 90       	pop	r1
     cf2:	18 95       	reti

00000cf4 <__vector_56>:
     cf4:	1f 92       	push	r1
     cf6:	0f 92       	push	r0
     cf8:	0f b6       	in	r0, 0x3f	; 63
     cfa:	0f 92       	push	r0
     cfc:	11 24       	eor	r1, r1
     cfe:	0b b6       	in	r0, 0x3b	; 59
     d00:	0f 92       	push	r0
     d02:	2f 93       	push	r18
     d04:	3f 93       	push	r19
     d06:	4f 93       	push	r20
     d08:	5f 93       	push	r21
     d0a:	6f 93       	push	r22
     d0c:	7f 93       	push	r23
     d0e:	8f 93       	push	r24
     d10:	9f 93       	push	r25
     d12:	af 93       	push	r26
     d14:	bf 93       	push	r27
     d16:	ef 93       	push	r30
     d18:	ff 93       	push	r31
     d1a:	e0 91 0c 20 	lds	r30, 0x200C	; 0x80200c <tc_tce1_ccb_callback>
     d1e:	f0 91 0d 20 	lds	r31, 0x200D	; 0x80200d <tc_tce1_ccb_callback+0x1>
     d22:	30 97       	sbiw	r30, 0x00	; 0
     d24:	09 f0       	breq	.+2      	; 0xd28 <__vector_56+0x34>
     d26:	19 95       	eicall
     d28:	ff 91       	pop	r31
     d2a:	ef 91       	pop	r30
     d2c:	bf 91       	pop	r27
     d2e:	af 91       	pop	r26
     d30:	9f 91       	pop	r25
     d32:	8f 91       	pop	r24
     d34:	7f 91       	pop	r23
     d36:	6f 91       	pop	r22
     d38:	5f 91       	pop	r21
     d3a:	4f 91       	pop	r20
     d3c:	3f 91       	pop	r19
     d3e:	2f 91       	pop	r18
     d40:	0f 90       	pop	r0
     d42:	0b be       	out	0x3b, r0	; 59
     d44:	0f 90       	pop	r0
     d46:	0f be       	out	0x3f, r0	; 63
     d48:	0f 90       	pop	r0
     d4a:	1f 90       	pop	r1
     d4c:	18 95       	reti

00000d4e <__vector_108>:
     d4e:	1f 92       	push	r1
     d50:	0f 92       	push	r0
     d52:	0f b6       	in	r0, 0x3f	; 63
     d54:	0f 92       	push	r0
     d56:	11 24       	eor	r1, r1
     d58:	0b b6       	in	r0, 0x3b	; 59
     d5a:	0f 92       	push	r0
     d5c:	2f 93       	push	r18
     d5e:	3f 93       	push	r19
     d60:	4f 93       	push	r20
     d62:	5f 93       	push	r21
     d64:	6f 93       	push	r22
     d66:	7f 93       	push	r23
     d68:	8f 93       	push	r24
     d6a:	9f 93       	push	r25
     d6c:	af 93       	push	r26
     d6e:	bf 93       	push	r27
     d70:	ef 93       	push	r30
     d72:	ff 93       	push	r31
     d74:	e0 91 0a 20 	lds	r30, 0x200A	; 0x80200a <tc_tcf0_ovf_callback>
     d78:	f0 91 0b 20 	lds	r31, 0x200B	; 0x80200b <tc_tcf0_ovf_callback+0x1>
     d7c:	30 97       	sbiw	r30, 0x00	; 0
     d7e:	09 f0       	breq	.+2      	; 0xd82 <__vector_108+0x34>
     d80:	19 95       	eicall
     d82:	ff 91       	pop	r31
     d84:	ef 91       	pop	r30
     d86:	bf 91       	pop	r27
     d88:	af 91       	pop	r26
     d8a:	9f 91       	pop	r25
     d8c:	8f 91       	pop	r24
     d8e:	7f 91       	pop	r23
     d90:	6f 91       	pop	r22
     d92:	5f 91       	pop	r21
     d94:	4f 91       	pop	r20
     d96:	3f 91       	pop	r19
     d98:	2f 91       	pop	r18
     d9a:	0f 90       	pop	r0
     d9c:	0b be       	out	0x3b, r0	; 59
     d9e:	0f 90       	pop	r0
     da0:	0f be       	out	0x3f, r0	; 63
     da2:	0f 90       	pop	r0
     da4:	1f 90       	pop	r1
     da6:	18 95       	reti

00000da8 <__vector_109>:
     da8:	1f 92       	push	r1
     daa:	0f 92       	push	r0
     dac:	0f b6       	in	r0, 0x3f	; 63
     dae:	0f 92       	push	r0
     db0:	11 24       	eor	r1, r1
     db2:	0b b6       	in	r0, 0x3b	; 59
     db4:	0f 92       	push	r0
     db6:	2f 93       	push	r18
     db8:	3f 93       	push	r19
     dba:	4f 93       	push	r20
     dbc:	5f 93       	push	r21
     dbe:	6f 93       	push	r22
     dc0:	7f 93       	push	r23
     dc2:	8f 93       	push	r24
     dc4:	9f 93       	push	r25
     dc6:	af 93       	push	r26
     dc8:	bf 93       	push	r27
     dca:	ef 93       	push	r30
     dcc:	ff 93       	push	r31
     dce:	e0 91 08 20 	lds	r30, 0x2008	; 0x802008 <tc_tcf0_err_callback>
     dd2:	f0 91 09 20 	lds	r31, 0x2009	; 0x802009 <tc_tcf0_err_callback+0x1>
     dd6:	30 97       	sbiw	r30, 0x00	; 0
     dd8:	09 f0       	breq	.+2      	; 0xddc <__vector_109+0x34>
     dda:	19 95       	eicall
     ddc:	ff 91       	pop	r31
     dde:	ef 91       	pop	r30
     de0:	bf 91       	pop	r27
     de2:	af 91       	pop	r26
     de4:	9f 91       	pop	r25
     de6:	8f 91       	pop	r24
     de8:	7f 91       	pop	r23
     dea:	6f 91       	pop	r22
     dec:	5f 91       	pop	r21
     dee:	4f 91       	pop	r20
     df0:	3f 91       	pop	r19
     df2:	2f 91       	pop	r18
     df4:	0f 90       	pop	r0
     df6:	0b be       	out	0x3b, r0	; 59
     df8:	0f 90       	pop	r0
     dfa:	0f be       	out	0x3f, r0	; 63
     dfc:	0f 90       	pop	r0
     dfe:	1f 90       	pop	r1
     e00:	18 95       	reti

00000e02 <__vector_110>:
     e02:	1f 92       	push	r1
     e04:	0f 92       	push	r0
     e06:	0f b6       	in	r0, 0x3f	; 63
     e08:	0f 92       	push	r0
     e0a:	11 24       	eor	r1, r1
     e0c:	0b b6       	in	r0, 0x3b	; 59
     e0e:	0f 92       	push	r0
     e10:	2f 93       	push	r18
     e12:	3f 93       	push	r19
     e14:	4f 93       	push	r20
     e16:	5f 93       	push	r21
     e18:	6f 93       	push	r22
     e1a:	7f 93       	push	r23
     e1c:	8f 93       	push	r24
     e1e:	9f 93       	push	r25
     e20:	af 93       	push	r26
     e22:	bf 93       	push	r27
     e24:	ef 93       	push	r30
     e26:	ff 93       	push	r31
     e28:	e0 91 06 20 	lds	r30, 0x2006	; 0x802006 <tc_tcf0_cca_callback>
     e2c:	f0 91 07 20 	lds	r31, 0x2007	; 0x802007 <tc_tcf0_cca_callback+0x1>
     e30:	30 97       	sbiw	r30, 0x00	; 0
     e32:	09 f0       	breq	.+2      	; 0xe36 <__vector_110+0x34>
     e34:	19 95       	eicall
     e36:	ff 91       	pop	r31
     e38:	ef 91       	pop	r30
     e3a:	bf 91       	pop	r27
     e3c:	af 91       	pop	r26
     e3e:	9f 91       	pop	r25
     e40:	8f 91       	pop	r24
     e42:	7f 91       	pop	r23
     e44:	6f 91       	pop	r22
     e46:	5f 91       	pop	r21
     e48:	4f 91       	pop	r20
     e4a:	3f 91       	pop	r19
     e4c:	2f 91       	pop	r18
     e4e:	0f 90       	pop	r0
     e50:	0b be       	out	0x3b, r0	; 59
     e52:	0f 90       	pop	r0
     e54:	0f be       	out	0x3f, r0	; 63
     e56:	0f 90       	pop	r0
     e58:	1f 90       	pop	r1
     e5a:	18 95       	reti

00000e5c <__vector_111>:
     e5c:	1f 92       	push	r1
     e5e:	0f 92       	push	r0
     e60:	0f b6       	in	r0, 0x3f	; 63
     e62:	0f 92       	push	r0
     e64:	11 24       	eor	r1, r1
     e66:	0b b6       	in	r0, 0x3b	; 59
     e68:	0f 92       	push	r0
     e6a:	2f 93       	push	r18
     e6c:	3f 93       	push	r19
     e6e:	4f 93       	push	r20
     e70:	5f 93       	push	r21
     e72:	6f 93       	push	r22
     e74:	7f 93       	push	r23
     e76:	8f 93       	push	r24
     e78:	9f 93       	push	r25
     e7a:	af 93       	push	r26
     e7c:	bf 93       	push	r27
     e7e:	ef 93       	push	r30
     e80:	ff 93       	push	r31
     e82:	e0 91 04 20 	lds	r30, 0x2004	; 0x802004 <tc_tcf0_ccb_callback>
     e86:	f0 91 05 20 	lds	r31, 0x2005	; 0x802005 <tc_tcf0_ccb_callback+0x1>
     e8a:	30 97       	sbiw	r30, 0x00	; 0
     e8c:	09 f0       	breq	.+2      	; 0xe90 <__vector_111+0x34>
     e8e:	19 95       	eicall
     e90:	ff 91       	pop	r31
     e92:	ef 91       	pop	r30
     e94:	bf 91       	pop	r27
     e96:	af 91       	pop	r26
     e98:	9f 91       	pop	r25
     e9a:	8f 91       	pop	r24
     e9c:	7f 91       	pop	r23
     e9e:	6f 91       	pop	r22
     ea0:	5f 91       	pop	r21
     ea2:	4f 91       	pop	r20
     ea4:	3f 91       	pop	r19
     ea6:	2f 91       	pop	r18
     ea8:	0f 90       	pop	r0
     eaa:	0b be       	out	0x3b, r0	; 59
     eac:	0f 90       	pop	r0
     eae:	0f be       	out	0x3f, r0	; 63
     eb0:	0f 90       	pop	r0
     eb2:	1f 90       	pop	r1
     eb4:	18 95       	reti

00000eb6 <__vector_112>:
     eb6:	1f 92       	push	r1
     eb8:	0f 92       	push	r0
     eba:	0f b6       	in	r0, 0x3f	; 63
     ebc:	0f 92       	push	r0
     ebe:	11 24       	eor	r1, r1
     ec0:	0b b6       	in	r0, 0x3b	; 59
     ec2:	0f 92       	push	r0
     ec4:	2f 93       	push	r18
     ec6:	3f 93       	push	r19
     ec8:	4f 93       	push	r20
     eca:	5f 93       	push	r21
     ecc:	6f 93       	push	r22
     ece:	7f 93       	push	r23
     ed0:	8f 93       	push	r24
     ed2:	9f 93       	push	r25
     ed4:	af 93       	push	r26
     ed6:	bf 93       	push	r27
     ed8:	ef 93       	push	r30
     eda:	ff 93       	push	r31
     edc:	e0 91 02 20 	lds	r30, 0x2002	; 0x802002 <tc_tcf0_ccc_callback>
     ee0:	f0 91 03 20 	lds	r31, 0x2003	; 0x802003 <tc_tcf0_ccc_callback+0x1>
     ee4:	30 97       	sbiw	r30, 0x00	; 0
     ee6:	09 f0       	breq	.+2      	; 0xeea <__vector_112+0x34>
     ee8:	19 95       	eicall
     eea:	ff 91       	pop	r31
     eec:	ef 91       	pop	r30
     eee:	bf 91       	pop	r27
     ef0:	af 91       	pop	r26
     ef2:	9f 91       	pop	r25
     ef4:	8f 91       	pop	r24
     ef6:	7f 91       	pop	r23
     ef8:	6f 91       	pop	r22
     efa:	5f 91       	pop	r21
     efc:	4f 91       	pop	r20
     efe:	3f 91       	pop	r19
     f00:	2f 91       	pop	r18
     f02:	0f 90       	pop	r0
     f04:	0b be       	out	0x3b, r0	; 59
     f06:	0f 90       	pop	r0
     f08:	0f be       	out	0x3f, r0	; 63
     f0a:	0f 90       	pop	r0
     f0c:	1f 90       	pop	r1
     f0e:	18 95       	reti

00000f10 <__vector_113>:
     f10:	1f 92       	push	r1
     f12:	0f 92       	push	r0
     f14:	0f b6       	in	r0, 0x3f	; 63
     f16:	0f 92       	push	r0
     f18:	11 24       	eor	r1, r1
     f1a:	0b b6       	in	r0, 0x3b	; 59
     f1c:	0f 92       	push	r0
     f1e:	2f 93       	push	r18
     f20:	3f 93       	push	r19
     f22:	4f 93       	push	r20
     f24:	5f 93       	push	r21
     f26:	6f 93       	push	r22
     f28:	7f 93       	push	r23
     f2a:	8f 93       	push	r24
     f2c:	9f 93       	push	r25
     f2e:	af 93       	push	r26
     f30:	bf 93       	push	r27
     f32:	ef 93       	push	r30
     f34:	ff 93       	push	r31
     f36:	e0 91 00 20 	lds	r30, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
     f3a:	f0 91 01 20 	lds	r31, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
     f3e:	30 97       	sbiw	r30, 0x00	; 0
     f40:	09 f0       	breq	.+2      	; 0xf44 <__vector_113+0x34>
     f42:	19 95       	eicall
     f44:	ff 91       	pop	r31
     f46:	ef 91       	pop	r30
     f48:	bf 91       	pop	r27
     f4a:	af 91       	pop	r26
     f4c:	9f 91       	pop	r25
     f4e:	8f 91       	pop	r24
     f50:	7f 91       	pop	r23
     f52:	6f 91       	pop	r22
     f54:	5f 91       	pop	r21
     f56:	4f 91       	pop	r20
     f58:	3f 91       	pop	r19
     f5a:	2f 91       	pop	r18
     f5c:	0f 90       	pop	r0
     f5e:	0b be       	out	0x3b, r0	; 59
     f60:	0f 90       	pop	r0
     f62:	0f be       	out	0x3f, r0	; 63
     f64:	0f 90       	pop	r0
     f66:	1f 90       	pop	r1
     f68:	18 95       	reti

00000f6a <tc_enable>:
     f6a:	1f 93       	push	r17
     f6c:	cf 93       	push	r28
     f6e:	df 93       	push	r29
     f70:	1f 92       	push	r1
     f72:	cd b7       	in	r28, 0x3d	; 61
     f74:	de b7       	in	r29, 0x3e	; 62
     f76:	2f b7       	in	r18, 0x3f	; 63
     f78:	29 83       	std	Y+1, r18	; 0x01
     f7a:	f8 94       	cli
     f7c:	19 81       	ldd	r17, Y+1	; 0x01
     f7e:	28 2f       	mov	r18, r24
     f80:	39 2f       	mov	r19, r25
     f82:	21 15       	cp	r18, r1
     f84:	88 e0       	ldi	r24, 0x08	; 8
     f86:	38 07       	cpc	r19, r24
     f88:	39 f4       	brne	.+14     	; 0xf98 <tc_enable+0x2e>
     f8a:	61 e0       	ldi	r22, 0x01	; 1
     f8c:	83 e0       	ldi	r24, 0x03	; 3
     f8e:	7d d9       	rcall	.-3334   	; 0x28a <sysclk_enable_module>
     f90:	64 e0       	ldi	r22, 0x04	; 4
     f92:	83 e0       	ldi	r24, 0x03	; 3
     f94:	7a d9       	rcall	.-3340   	; 0x28a <sysclk_enable_module>
     f96:	43 c0       	rjmp	.+134    	; 0x101e <tc_enable+0xb4>
     f98:	20 34       	cpi	r18, 0x40	; 64
     f9a:	88 e0       	ldi	r24, 0x08	; 8
     f9c:	38 07       	cpc	r19, r24
     f9e:	39 f4       	brne	.+14     	; 0xfae <tc_enable+0x44>
     fa0:	62 e0       	ldi	r22, 0x02	; 2
     fa2:	83 e0       	ldi	r24, 0x03	; 3
     fa4:	72 d9       	rcall	.-3356   	; 0x28a <sysclk_enable_module>
     fa6:	64 e0       	ldi	r22, 0x04	; 4
     fa8:	83 e0       	ldi	r24, 0x03	; 3
     faa:	6f d9       	rcall	.-3362   	; 0x28a <sysclk_enable_module>
     fac:	38 c0       	rjmp	.+112    	; 0x101e <tc_enable+0xb4>
     fae:	21 15       	cp	r18, r1
     fb0:	89 e0       	ldi	r24, 0x09	; 9
     fb2:	38 07       	cpc	r19, r24
     fb4:	39 f4       	brne	.+14     	; 0xfc4 <tc_enable+0x5a>
     fb6:	61 e0       	ldi	r22, 0x01	; 1
     fb8:	84 e0       	ldi	r24, 0x04	; 4
     fba:	67 d9       	rcall	.-3378   	; 0x28a <sysclk_enable_module>
     fbc:	64 e0       	ldi	r22, 0x04	; 4
     fbe:	84 e0       	ldi	r24, 0x04	; 4
     fc0:	64 d9       	rcall	.-3384   	; 0x28a <sysclk_enable_module>
     fc2:	2d c0       	rjmp	.+90     	; 0x101e <tc_enable+0xb4>
     fc4:	20 34       	cpi	r18, 0x40	; 64
     fc6:	89 e0       	ldi	r24, 0x09	; 9
     fc8:	38 07       	cpc	r19, r24
     fca:	39 f4       	brne	.+14     	; 0xfda <tc_enable+0x70>
     fcc:	62 e0       	ldi	r22, 0x02	; 2
     fce:	84 e0       	ldi	r24, 0x04	; 4
     fd0:	5c d9       	rcall	.-3400   	; 0x28a <sysclk_enable_module>
     fd2:	64 e0       	ldi	r22, 0x04	; 4
     fd4:	84 e0       	ldi	r24, 0x04	; 4
     fd6:	59 d9       	rcall	.-3406   	; 0x28a <sysclk_enable_module>
     fd8:	22 c0       	rjmp	.+68     	; 0x101e <tc_enable+0xb4>
     fda:	21 15       	cp	r18, r1
     fdc:	8a e0       	ldi	r24, 0x0A	; 10
     fde:	38 07       	cpc	r19, r24
     fe0:	39 f4       	brne	.+14     	; 0xff0 <tc_enable+0x86>
     fe2:	61 e0       	ldi	r22, 0x01	; 1
     fe4:	85 e0       	ldi	r24, 0x05	; 5
     fe6:	51 d9       	rcall	.-3422   	; 0x28a <sysclk_enable_module>
     fe8:	64 e0       	ldi	r22, 0x04	; 4
     fea:	85 e0       	ldi	r24, 0x05	; 5
     fec:	4e d9       	rcall	.-3428   	; 0x28a <sysclk_enable_module>
     fee:	17 c0       	rjmp	.+46     	; 0x101e <tc_enable+0xb4>
     ff0:	20 34       	cpi	r18, 0x40	; 64
     ff2:	8a e0       	ldi	r24, 0x0A	; 10
     ff4:	38 07       	cpc	r19, r24
     ff6:	39 f4       	brne	.+14     	; 0x1006 <tc_enable+0x9c>
     ff8:	62 e0       	ldi	r22, 0x02	; 2
     ffa:	85 e0       	ldi	r24, 0x05	; 5
     ffc:	46 d9       	rcall	.-3444   	; 0x28a <sysclk_enable_module>
     ffe:	64 e0       	ldi	r22, 0x04	; 4
    1000:	85 e0       	ldi	r24, 0x05	; 5
    1002:	43 d9       	rcall	.-3450   	; 0x28a <sysclk_enable_module>
    1004:	0c c0       	rjmp	.+24     	; 0x101e <tc_enable+0xb4>
    1006:	21 15       	cp	r18, r1
    1008:	3b 40       	sbci	r19, 0x0B	; 11
    100a:	39 f4       	brne	.+14     	; 0x101a <tc_enable+0xb0>
    100c:	61 e0       	ldi	r22, 0x01	; 1
    100e:	86 e0       	ldi	r24, 0x06	; 6
    1010:	3c d9       	rcall	.-3464   	; 0x28a <sysclk_enable_module>
    1012:	64 e0       	ldi	r22, 0x04	; 4
    1014:	86 e0       	ldi	r24, 0x06	; 6
    1016:	39 d9       	rcall	.-3470   	; 0x28a <sysclk_enable_module>
    1018:	02 c0       	rjmp	.+4      	; 0x101e <tc_enable+0xb4>
    101a:	1f bf       	out	0x3f, r17	; 63
    101c:	01 c0       	rjmp	.+2      	; 0x1020 <tc_enable+0xb6>
    101e:	1f bf       	out	0x3f, r17	; 63
    1020:	0f 90       	pop	r0
    1022:	df 91       	pop	r29
    1024:	cf 91       	pop	r28
    1026:	1f 91       	pop	r17
    1028:	08 95       	ret

0000102a <tc_set_overflow_interrupt_callback>:

void tc_set_overflow_interrupt_callback(volatile void *tc,
		tc_callback_t callback)
{
#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    102a:	81 15       	cp	r24, r1
    102c:	28 e0       	ldi	r18, 0x08	; 8
    102e:	92 07       	cpc	r25, r18
    1030:	29 f4       	brne	.+10     	; 0x103c <tc_set_overflow_interrupt_callback+0x12>
		tc_tcc0_ovf_callback = callback;
    1032:	60 93 46 20 	sts	0x2046, r22	; 0x802046 <tc_tcc0_ovf_callback>
    1036:	70 93 47 20 	sts	0x2047, r23	; 0x802047 <tc_tcc0_ovf_callback+0x1>
    103a:	08 95       	ret
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    103c:	80 34       	cpi	r24, 0x40	; 64
    103e:	28 e0       	ldi	r18, 0x08	; 8
    1040:	92 07       	cpc	r25, r18
    1042:	29 f4       	brne	.+10     	; 0x104e <tc_set_overflow_interrupt_callback+0x24>
		tc_tcc1_ovf_callback = callback;
    1044:	60 93 3a 20 	sts	0x203A, r22	; 0x80203a <tc_tcc1_ovf_callback>
    1048:	70 93 3b 20 	sts	0x203B, r23	; 0x80203b <tc_tcc1_ovf_callback+0x1>
    104c:	08 95       	ret
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    104e:	81 15       	cp	r24, r1
    1050:	29 e0       	ldi	r18, 0x09	; 9
    1052:	92 07       	cpc	r25, r18
    1054:	29 f4       	brne	.+10     	; 0x1060 <tc_set_overflow_interrupt_callback+0x36>
		tc_tcd0_ovf_callback = callback;
    1056:	60 93 32 20 	sts	0x2032, r22	; 0x802032 <tc_tcd0_ovf_callback>
    105a:	70 93 33 20 	sts	0x2033, r23	; 0x802033 <tc_tcd0_ovf_callback+0x1>
    105e:	08 95       	ret
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
    1060:	80 34       	cpi	r24, 0x40	; 64
    1062:	29 e0       	ldi	r18, 0x09	; 9
    1064:	92 07       	cpc	r25, r18
    1066:	29 f4       	brne	.+10     	; 0x1072 <tc_set_overflow_interrupt_callback+0x48>
		tc_tcd1_ovf_callback = callback;
    1068:	60 93 26 20 	sts	0x2026, r22	; 0x802026 <tc_tcd1_ovf_callback>
    106c:	70 93 27 20 	sts	0x2027, r23	; 0x802027 <tc_tcd1_ovf_callback+0x1>
    1070:	08 95       	ret
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    1072:	81 15       	cp	r24, r1
    1074:	2a e0       	ldi	r18, 0x0A	; 10
    1076:	92 07       	cpc	r25, r18
    1078:	29 f4       	brne	.+10     	; 0x1084 <tc_set_overflow_interrupt_callback+0x5a>
		tc_tce0_ovf_callback = callback;
    107a:	60 93 1e 20 	sts	0x201E, r22	; 0x80201e <tc_tce0_ovf_callback>
    107e:	70 93 1f 20 	sts	0x201F, r23	; 0x80201f <tc_tce0_ovf_callback+0x1>
    1082:	08 95       	ret
	} else
#endif
#ifdef TCE1
	if ((uintptr_t) tc == (uintptr_t) & TCE1) {
    1084:	80 34       	cpi	r24, 0x40	; 64
    1086:	2a e0       	ldi	r18, 0x0A	; 10
    1088:	92 07       	cpc	r25, r18
    108a:	29 f4       	brne	.+10     	; 0x1096 <tc_set_overflow_interrupt_callback+0x6c>
		tc_tce1_ovf_callback = callback;
    108c:	60 93 12 20 	sts	0x2012, r22	; 0x802012 <tc_tce1_ovf_callback>
    1090:	70 93 13 20 	sts	0x2013, r23	; 0x802013 <tc_tce1_ovf_callback+0x1>
    1094:	08 95       	ret
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    1096:	81 15       	cp	r24, r1
    1098:	9b 40       	sbci	r25, 0x0B	; 11
    109a:	21 f4       	brne	.+8      	; 0x10a4 <tc_set_overflow_interrupt_callback+0x7a>
		tc_tcf0_ovf_callback = callback;
    109c:	60 93 0a 20 	sts	0x200A, r22	; 0x80200a <tc_tcf0_ovf_callback>
    10a0:	70 93 0b 20 	sts	0x200B, r23	; 0x80200b <tc_tcf0_ovf_callback+0x1>
    10a4:	08 95       	ret

000010a6 <pwm_set_frequency>:
 *
 * \param config Pointer to PWM configuration.
 * \param freq_hz Wanted PWM frequency in Hz.
 */
void pwm_set_frequency(struct pwm_config *config, uint16_t freq_hz)
{
    10a6:	cf 92       	push	r12
    10a8:	df 92       	push	r13
    10aa:	ef 92       	push	r14
    10ac:	ff 92       	push	r15
    10ae:	cf 93       	push	r28
    10b0:	df 93       	push	r29
    10b2:	ec 01       	movw	r28, r24
	/* Avoid division by zero. */
	Assert(freq_hz != 0);

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
    10b4:	6b 01       	movw	r12, r22
    10b6:	e1 2c       	mov	r14, r1
    10b8:	f1 2c       	mov	r15, r1
    10ba:	60 e0       	ldi	r22, 0x00	; 0
    10bc:	78 e4       	ldi	r23, 0x48	; 72
    10be:	88 ee       	ldi	r24, 0xE8	; 232
    10c0:	91 e0       	ldi	r25, 0x01	; 1
    10c2:	a7 01       	movw	r20, r14
    10c4:	96 01       	movw	r18, r12
    10c6:	5e d2       	rcall	.+1212   	; 0x1584 <__udivmodsi4>
    10c8:	ca 01       	movw	r24, r20
    10ca:	b9 01       	movw	r22, r18
    10cc:	2f ef       	ldi	r18, 0xFF	; 255
    10ce:	3f ef       	ldi	r19, 0xFF	; 255
    10d0:	40 e0       	ldi	r20, 0x00	; 0
    10d2:	50 e0       	ldi	r21, 0x00	; 0
    10d4:	57 d2       	rcall	.+1198   	; 0x1584 <__udivmodsi4>
	if (smallest_div < 1) {
    10d6:	21 15       	cp	r18, r1
    10d8:	31 05       	cpc	r19, r1
    10da:	29 f4       	brne	.+10     	; 0x10e6 <pwm_set_frequency+0x40>
		dividor = 1;
		config->clk_sel = PWM_CLK_DIV1;
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	8c 83       	std	Y+4, r24	; 0x04

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
	if (smallest_div < 1) {
		dividor = 1;
    10e0:	21 e0       	ldi	r18, 0x01	; 1
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	2d c0       	rjmp	.+90     	; 0x1140 <pwm_set_frequency+0x9a>
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
    10e6:	22 30       	cpi	r18, 0x02	; 2
    10e8:	31 05       	cpc	r19, r1
    10ea:	28 f4       	brcc	.+10     	; 0x10f6 <pwm_set_frequency+0x50>
		dividor = 2;
		config->clk_sel = PWM_CLK_DIV2;
    10ec:	82 e0       	ldi	r24, 0x02	; 2
    10ee:	8c 83       	std	Y+4, r24	; 0x04
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
	if (smallest_div < 1) {
		dividor = 1;
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
		dividor = 2;
    10f0:	22 e0       	ldi	r18, 0x02	; 2
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	25 c0       	rjmp	.+74     	; 0x1140 <pwm_set_frequency+0x9a>
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
    10f6:	24 30       	cpi	r18, 0x04	; 4
    10f8:	31 05       	cpc	r19, r1
    10fa:	28 f4       	brcc	.+10     	; 0x1106 <pwm_set_frequency+0x60>
		dividor = 4;
		config->clk_sel = PWM_CLK_DIV4;
    10fc:	83 e0       	ldi	r24, 0x03	; 3
    10fe:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
		dividor = 2;
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
		dividor = 4;
    1100:	24 e0       	ldi	r18, 0x04	; 4
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	1d c0       	rjmp	.+58     	; 0x1140 <pwm_set_frequency+0x9a>
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
    1106:	28 30       	cpi	r18, 0x08	; 8
    1108:	31 05       	cpc	r19, r1
    110a:	28 f4       	brcc	.+10     	; 0x1116 <pwm_set_frequency+0x70>
		dividor = 8;
		config->clk_sel = PWM_CLK_DIV8;
    110c:	84 e0       	ldi	r24, 0x04	; 4
    110e:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
		dividor = 4;
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
		dividor = 8;
    1110:	28 e0       	ldi	r18, 0x08	; 8
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	15 c0       	rjmp	.+42     	; 0x1140 <pwm_set_frequency+0x9a>
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
    1116:	20 34       	cpi	r18, 0x40	; 64
    1118:	31 05       	cpc	r19, r1
    111a:	28 f4       	brcc	.+10     	; 0x1126 <pwm_set_frequency+0x80>
		dividor = 64;
		config->clk_sel = PWM_CLK_DIV64;
    111c:	85 e0       	ldi	r24, 0x05	; 5
    111e:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
		dividor = 8;
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
		dividor = 64;
    1120:	20 e4       	ldi	r18, 0x40	; 64
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	0d c0       	rjmp	.+26     	; 0x1140 <pwm_set_frequency+0x9a>
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
    1126:	2f 3f       	cpi	r18, 0xFF	; 255
    1128:	31 05       	cpc	r19, r1
    112a:	09 f0       	breq	.+2      	; 0x112e <pwm_set_frequency+0x88>
    112c:	28 f4       	brcc	.+10     	; 0x1138 <pwm_set_frequency+0x92>
		dividor = 256;
		config->clk_sel = PWM_CLK_DIV256;
    112e:	86 e0       	ldi	r24, 0x06	; 6
    1130:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
		dividor = 64;
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
		dividor = 256;
    1132:	20 e0       	ldi	r18, 0x00	; 0
    1134:	31 e0       	ldi	r19, 0x01	; 1
    1136:	04 c0       	rjmp	.+8      	; 0x1140 <pwm_set_frequency+0x9a>
		config->clk_sel = PWM_CLK_DIV256;
	} else {
		dividor = 1024;
		config->clk_sel = PWM_CLK_DIV1024;
    1138:	87 e0       	ldi	r24, 0x07	; 7
    113a:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
		dividor = 256;
		config->clk_sel = PWM_CLK_DIV256;
	} else {
		dividor = 1024;
    113c:	20 e0       	ldi	r18, 0x00	; 0
    113e:	34 e0       	ldi	r19, 0x04	; 4
		config->clk_sel = PWM_CLK_DIV1024;
	}

	/* Calculate the period from the just found divider */
	config->period = cpu_hz / dividor / freq_hz;
    1140:	40 e0       	ldi	r20, 0x00	; 0
    1142:	50 e0       	ldi	r21, 0x00	; 0
    1144:	60 e0       	ldi	r22, 0x00	; 0
    1146:	78 e4       	ldi	r23, 0x48	; 72
    1148:	88 ee       	ldi	r24, 0xE8	; 232
    114a:	91 e0       	ldi	r25, 0x01	; 1
    114c:	1b d2       	rcall	.+1078   	; 0x1584 <__udivmodsi4>
    114e:	ca 01       	movw	r24, r20
    1150:	b9 01       	movw	r22, r18
    1152:	a7 01       	movw	r20, r14
    1154:	96 01       	movw	r18, r12
    1156:	16 d2       	rcall	.+1068   	; 0x1584 <__udivmodsi4>
    1158:	2d 83       	std	Y+5, r18	; 0x05
    115a:	3e 83       	std	Y+6, r19	; 0x06

	/* Make sure our period is at least 100 ticks so we are able to provide
	   a full range (0-100% duty cycle */
	if (config->period < 100) {
    115c:	24 36       	cpi	r18, 0x64	; 100
    115e:	31 05       	cpc	r19, r1
    1160:	18 f4       	brcc	.+6      	; 0x1168 <pwm_set_frequency+0xc2>
		/* The period is too short. */
		config->clk_sel = PWM_CLK_OFF;
    1162:	1c 82       	std	Y+4, r1	; 0x04
		config->period = 0;
    1164:	1d 82       	std	Y+5, r1	; 0x05
    1166:	1e 82       	std	Y+6, r1	; 0x06
		Assert(false);
	}
}
    1168:	df 91       	pop	r29
    116a:	cf 91       	pop	r28
    116c:	ff 90       	pop	r15
    116e:	ef 90       	pop	r14
    1170:	df 90       	pop	r13
    1172:	cf 90       	pop	r12
    1174:	08 95       	ret

00001176 <pwm_init>:
 * \param channel \ref pwm_channel_t "CC channel" to use for this PWM.
 * \param freq_hz Frequency to use for this PWM.
  */
void pwm_init(struct pwm_config *config, enum pwm_tc_t tc,
		enum pwm_channel_t channel, uint16_t freq_hz)
{
    1176:	0f 93       	push	r16
    1178:	1f 93       	push	r17
    117a:	cf 93       	push	r28
    117c:	df 93       	push	r29
    117e:	ec 01       	movw	r28, r24
    1180:	89 01       	movw	r16, r18

	/* Set TC and correct I/O pin to output */
/*
 * Support and FAQ: visit <a href="https://www.microchip.com/support/">Microchip Support</a>
 */
	switch (tc) {
    1182:	86 2f       	mov	r24, r22
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	87 30       	cpi	r24, 0x07	; 7
    1188:	91 05       	cpc	r25, r1
    118a:	08 f0       	brcs	.+2      	; 0x118e <pwm_init+0x18>
    118c:	8a c0       	rjmp	.+276    	; 0x12a2 <pwm_init+0x12c>
    118e:	fc 01       	movw	r30, r24
    1190:	88 27       	eor	r24, r24
    1192:	ec 50       	subi	r30, 0x0C	; 12
    1194:	ff 4f       	sbci	r31, 0xFF	; 255
    1196:	8f 4f       	sbci	r24, 0xFF	; 255
    1198:	17 c2       	rjmp	.+1070   	; 0x15c8 <__tablejump2__>
#if defined(TCC0)
	case PWM_TCC0:
		config->tc = &TCC0;
    119a:	80 e0       	ldi	r24, 0x00	; 0
    119c:	98 e0       	ldi	r25, 0x08	; 8
    119e:	88 83       	st	Y, r24
    11a0:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIR |= (1 << (channel-1));
    11a2:	e0 e4       	ldi	r30, 0x40	; 64
    11a4:	f6 e0       	ldi	r31, 0x06	; 6
    11a6:	30 81       	ld	r19, Z
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	2f ef       	ldi	r18, 0xFF	; 255
    11ae:	24 0f       	add	r18, r20
    11b0:	02 c0       	rjmp	.+4      	; 0x11b6 <pwm_init+0x40>
    11b2:	88 0f       	add	r24, r24
    11b4:	99 1f       	adc	r25, r25
    11b6:	2a 95       	dec	r18
    11b8:	e2 f7       	brpl	.-8      	; 0x11b2 <pwm_init+0x3c>
    11ba:	83 2b       	or	r24, r19
    11bc:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    11be:	71 c0       	rjmp	.+226    	; 0x12a2 <pwm_init+0x12c>
#endif
#if defined(TCC1)
	case PWM_TCC1:
		config->tc = &TCC1;
    11c0:	80 e4       	ldi	r24, 0x40	; 64
    11c2:	98 e0       	ldi	r25, 0x08	; 8
    11c4:	88 83       	st	Y, r24
    11c6:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIR |= (1 << (channel+3));
    11c8:	e0 e4       	ldi	r30, 0x40	; 64
    11ca:	f6 e0       	ldi	r31, 0x06	; 6
    11cc:	30 81       	ld	r19, Z
    11ce:	81 e0       	ldi	r24, 0x01	; 1
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	23 e0       	ldi	r18, 0x03	; 3
    11d4:	24 0f       	add	r18, r20
    11d6:	02 c0       	rjmp	.+4      	; 0x11dc <pwm_init+0x66>
    11d8:	88 0f       	add	r24, r24
    11da:	99 1f       	adc	r25, r25
    11dc:	2a 95       	dec	r18
    11de:	e2 f7       	brpl	.-8      	; 0x11d8 <pwm_init+0x62>
    11e0:	83 2b       	or	r24, r19
    11e2:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    11e4:	5e c0       	rjmp	.+188    	; 0x12a2 <pwm_init+0x12c>
#endif
#if defined(TCD0)
	case PWM_TCD0:
		config->tc = &TCD0;
    11e6:	80 e0       	ldi	r24, 0x00	; 0
    11e8:	99 e0       	ldi	r25, 0x09	; 9
    11ea:	88 83       	st	Y, r24
    11ec:	99 83       	std	Y+1, r25	; 0x01
		PORTD.DIR |= (1 << (channel-1));
    11ee:	e0 e6       	ldi	r30, 0x60	; 96
    11f0:	f6 e0       	ldi	r31, 0x06	; 6
    11f2:	30 81       	ld	r19, Z
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	2f ef       	ldi	r18, 0xFF	; 255
    11fa:	24 0f       	add	r18, r20
    11fc:	02 c0       	rjmp	.+4      	; 0x1202 <pwm_init+0x8c>
    11fe:	88 0f       	add	r24, r24
    1200:	99 1f       	adc	r25, r25
    1202:	2a 95       	dec	r18
    1204:	e2 f7       	brpl	.-8      	; 0x11fe <pwm_init+0x88>
    1206:	83 2b       	or	r24, r19
    1208:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    120a:	4b c0       	rjmp	.+150    	; 0x12a2 <pwm_init+0x12c>
#endif
#if defined(TCD1)
	case PWM_TCD1:
		config->tc = &TCD1;
    120c:	80 e4       	ldi	r24, 0x40	; 64
    120e:	99 e0       	ldi	r25, 0x09	; 9
    1210:	88 83       	st	Y, r24
    1212:	99 83       	std	Y+1, r25	; 0x01
		PORTD.DIR |= (1 << (channel+3));
    1214:	e0 e6       	ldi	r30, 0x60	; 96
    1216:	f6 e0       	ldi	r31, 0x06	; 6
    1218:	30 81       	ld	r19, Z
    121a:	81 e0       	ldi	r24, 0x01	; 1
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	23 e0       	ldi	r18, 0x03	; 3
    1220:	24 0f       	add	r18, r20
    1222:	02 c0       	rjmp	.+4      	; 0x1228 <pwm_init+0xb2>
    1224:	88 0f       	add	r24, r24
    1226:	99 1f       	adc	r25, r25
    1228:	2a 95       	dec	r18
    122a:	e2 f7       	brpl	.-8      	; 0x1224 <pwm_init+0xae>
    122c:	83 2b       	or	r24, r19
    122e:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    1230:	38 c0       	rjmp	.+112    	; 0x12a2 <pwm_init+0x12c>
#endif

#if defined(TCE0)
	case PWM_TCE0:
		config->tc = &TCE0;
    1232:	80 e0       	ldi	r24, 0x00	; 0
    1234:	9a e0       	ldi	r25, 0x0A	; 10
    1236:	88 83       	st	Y, r24
    1238:	99 83       	std	Y+1, r25	; 0x01
		PORTE.DIR |= (1 << (channel-1));
    123a:	e0 e8       	ldi	r30, 0x80	; 128
    123c:	f6 e0       	ldi	r31, 0x06	; 6
    123e:	30 81       	ld	r19, Z
    1240:	81 e0       	ldi	r24, 0x01	; 1
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	2f ef       	ldi	r18, 0xFF	; 255
    1246:	24 0f       	add	r18, r20
    1248:	02 c0       	rjmp	.+4      	; 0x124e <pwm_init+0xd8>
    124a:	88 0f       	add	r24, r24
    124c:	99 1f       	adc	r25, r25
    124e:	2a 95       	dec	r18
    1250:	e2 f7       	brpl	.-8      	; 0x124a <pwm_init+0xd4>
    1252:	83 2b       	or	r24, r19
    1254:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    1256:	25 c0       	rjmp	.+74     	; 0x12a2 <pwm_init+0x12c>
#endif
#if defined(TCE1)
	case PWM_TCE1:
		config->tc = &TCE1;
    1258:	80 e4       	ldi	r24, 0x40	; 64
    125a:	9a e0       	ldi	r25, 0x0A	; 10
    125c:	88 83       	st	Y, r24
    125e:	99 83       	std	Y+1, r25	; 0x01
		PORTE.DIR |= (1 << (channel+3));
    1260:	e0 e8       	ldi	r30, 0x80	; 128
    1262:	f6 e0       	ldi	r31, 0x06	; 6
    1264:	30 81       	ld	r19, Z
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	23 e0       	ldi	r18, 0x03	; 3
    126c:	24 0f       	add	r18, r20
    126e:	02 c0       	rjmp	.+4      	; 0x1274 <pwm_init+0xfe>
    1270:	88 0f       	add	r24, r24
    1272:	99 1f       	adc	r25, r25
    1274:	2a 95       	dec	r18
    1276:	e2 f7       	brpl	.-8      	; 0x1270 <pwm_init+0xfa>
    1278:	83 2b       	or	r24, r19
    127a:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    127c:	12 c0       	rjmp	.+36     	; 0x12a2 <pwm_init+0x12c>
#endif

#if defined(TCF0)
	case PWM_TCF0:
		config->tc = &TCF0;
    127e:	80 e0       	ldi	r24, 0x00	; 0
    1280:	9b e0       	ldi	r25, 0x0B	; 11
    1282:	88 83       	st	Y, r24
    1284:	99 83       	std	Y+1, r25	; 0x01
		PORTF.DIR |= (1 << (channel-1));
    1286:	e0 ea       	ldi	r30, 0xA0	; 160
    1288:	f6 e0       	ldi	r31, 0x06	; 6
    128a:	30 81       	ld	r19, Z
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	2f ef       	ldi	r18, 0xFF	; 255
    1292:	24 0f       	add	r18, r20
    1294:	02 c0       	rjmp	.+4      	; 0x129a <pwm_init+0x124>
    1296:	88 0f       	add	r24, r24
    1298:	99 1f       	adc	r25, r25
    129a:	2a 95       	dec	r18
    129c:	e2 f7       	brpl	.-8      	; 0x1296 <pwm_init+0x120>
    129e:	83 2b       	or	r24, r19
    12a0:	80 83       	st	Z, r24
	}

	/* Make sure we are not given a channel number larger
	   than this TC can handle */
	Assert(channel <= num_chan);
	config->channel = channel;
    12a2:	4a 83       	std	Y+2, r20	; 0x02

	/* Set the correct cc_mask */
	switch (channel) {
    12a4:	42 30       	cpi	r20, 0x02	; 2
    12a6:	61 f0       	breq	.+24     	; 0x12c0 <pwm_init+0x14a>
    12a8:	18 f4       	brcc	.+6      	; 0x12b0 <pwm_init+0x13a>
    12aa:	41 30       	cpi	r20, 0x01	; 1
    12ac:	31 f0       	breq	.+12     	; 0x12ba <pwm_init+0x144>
    12ae:	10 c0       	rjmp	.+32     	; 0x12d0 <pwm_init+0x15a>
    12b0:	43 30       	cpi	r20, 0x03	; 3
    12b2:	49 f0       	breq	.+18     	; 0x12c6 <pwm_init+0x150>
    12b4:	44 30       	cpi	r20, 0x04	; 4
    12b6:	51 f0       	breq	.+20     	; 0x12cc <pwm_init+0x156>
    12b8:	0b c0       	rjmp	.+22     	; 0x12d0 <pwm_init+0x15a>
	case PWM_CH_A:
		config->cc_mask = TC_CCAEN;
    12ba:	80 e1       	ldi	r24, 0x10	; 16
    12bc:	8b 83       	std	Y+3, r24	; 0x03
		break;
    12be:	08 c0       	rjmp	.+16     	; 0x12d0 <pwm_init+0x15a>
	case PWM_CH_B:
		config->cc_mask = TC_CCBEN;
    12c0:	80 e2       	ldi	r24, 0x20	; 32
    12c2:	8b 83       	std	Y+3, r24	; 0x03
		break;
    12c4:	05 c0       	rjmp	.+10     	; 0x12d0 <pwm_init+0x15a>
	case PWM_CH_C:
		config->cc_mask = TC_CCCEN;
    12c6:	80 e4       	ldi	r24, 0x40	; 64
    12c8:	8b 83       	std	Y+3, r24	; 0x03
		break;
    12ca:	02 c0       	rjmp	.+4      	; 0x12d0 <pwm_init+0x15a>
	case PWM_CH_D:
		config->cc_mask = TC_CCDEN;
    12cc:	80 e8       	ldi	r24, 0x80	; 128
    12ce:	8b 83       	std	Y+3, r24	; 0x03
		Assert(false);
		break;
	}

	/* Enable peripheral clock for this TC */
	tc_enable(config->tc);
    12d0:	88 81       	ld	r24, Y
    12d2:	99 81       	ldd	r25, Y+1	; 0x01
    12d4:	4a de       	rcall	.-876    	; 0xf6a <tc_enable>

	/* Set this TC's waveform generator in single slope mode */
	tc_set_wgm(config->tc, TC_WG_SS);
    12d6:	e8 81       	ld	r30, Y
    12d8:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    12da:	81 81       	ldd	r24, Z+1	; 0x01
    12dc:	88 7f       	andi	r24, 0xF8	; 248
    12de:	83 60       	ori	r24, 0x03	; 3
    12e0:	81 83       	std	Z+1, r24	; 0x01

	/* Default values (disable TC and set minimum period)*/
	config->period = 0;
    12e2:	1d 82       	std	Y+5, r1	; 0x05
    12e4:	1e 82       	std	Y+6, r1	; 0x06
	config->clk_sel = PWM_CLK_OFF;
    12e6:	1c 82       	std	Y+4, r1	; 0x04
	tc_write_clock_source(config->tc, PWM_CLK_OFF);
    12e8:	e8 81       	ld	r30, Y
    12ea:	f9 81       	ldd	r31, Y+1	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    12ec:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    12ee:	80 7f       	andi	r24, 0xF0	; 240
    12f0:	80 83       	st	Z, r24

	/* Set the PWM frequency */
	pwm_set_frequency(config, freq_hz);
    12f2:	b8 01       	movw	r22, r16
    12f4:	ce 01       	movw	r24, r28
    12f6:	d7 de       	rcall	.-594    	; 0x10a6 <pwm_set_frequency>
}
    12f8:	df 91       	pop	r29
    12fa:	cf 91       	pop	r28
    12fc:	1f 91       	pop	r17
    12fe:	0f 91       	pop	r16
    1300:	08 95       	ret

00001302 <pwm_start>:
 *
 * \param *config           Pointer to the PWM configuration struct
 * \param duty_cycle_scale  Duty cycle as a value between 0 and 100.
 */
void pwm_start(struct pwm_config *config, uint8_t duty_cycle_scale)
{
    1302:	cf 93       	push	r28
    1304:	df 93       	push	r29
    1306:	ec 01       	movw	r28, r24
 */
static inline void pwm_set_duty_cycle_percent(struct pwm_config *config,
		uint8_t duty_cycle_scale)
{
	Assert( duty_cycle_scale <= 100 );
	tc_write_cc_buffer(config->tc, (enum tc_cc_channel_t)config->channel,
    1308:	2d 81       	ldd	r18, Y+5	; 0x05
    130a:	3e 81       	ldd	r19, Y+6	; 0x06
    130c:	2f 5f       	subi	r18, 0xFF	; 255
    130e:	3f 4f       	sbci	r19, 0xFF	; 255
    1310:	a6 2f       	mov	r26, r22
    1312:	b0 e0       	ldi	r27, 0x00	; 0
    1314:	61 d1       	rcall	.+706    	; 0x15d8 <__umulhisi3>
    1316:	24 e6       	ldi	r18, 0x64	; 100
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	40 e0       	ldi	r20, 0x00	; 0
    131c:	50 e0       	ldi	r21, 0x00	; 0
    131e:	32 d1       	rcall	.+612    	; 0x1584 <__udivmodsi4>
    1320:	8a 81       	ldd	r24, Y+2	; 0x02
    1322:	e8 81       	ld	r30, Y
    1324:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param buffer_value Counter Buffer value
 */
static inline void tc_write_cc_buffer(volatile void *tc,
		enum tc_cc_channel_t channel_index, uint16_t buffer_value)
{
	if (tc_is_tc0(void *tc)) {
    1326:	e6 fd       	sbrc	r30, 6
    1328:	17 c0       	rjmp	.+46     	; 0x1358 <pwm_start+0x56>
		switch (channel_index) {
    132a:	82 30       	cpi	r24, 0x02	; 2
    132c:	61 f0       	breq	.+24     	; 0x1346 <pwm_start+0x44>
    132e:	18 f4       	brcc	.+6      	; 0x1336 <pwm_start+0x34>
    1330:	81 30       	cpi	r24, 0x01	; 1
    1332:	31 f0       	breq	.+12     	; 0x1340 <pwm_start+0x3e>
    1334:	1b c0       	rjmp	.+54     	; 0x136c <pwm_start+0x6a>
    1336:	83 30       	cpi	r24, 0x03	; 3
    1338:	49 f0       	breq	.+18     	; 0x134c <pwm_start+0x4a>
    133a:	84 30       	cpi	r24, 0x04	; 4
    133c:	51 f0       	breq	.+20     	; 0x1352 <pwm_start+0x50>
    133e:	16 c0       	rjmp	.+44     	; 0x136c <pwm_start+0x6a>
		case TC_CCA:
			((TC0_t *)tc)->CCABUF = buffer_value;
    1340:	20 af       	std	Z+56, r18	; 0x38
    1342:	31 af       	std	Z+57, r19	; 0x39
    1344:	13 c0       	rjmp	.+38     	; 0x136c <pwm_start+0x6a>
			break;
		case TC_CCB:
			((TC0_t *)tc)->CCBBUF = buffer_value;
    1346:	22 af       	std	Z+58, r18	; 0x3a
    1348:	33 af       	std	Z+59, r19	; 0x3b
    134a:	10 c0       	rjmp	.+32     	; 0x136c <pwm_start+0x6a>
			break;
		case TC_CCC:
			((TC0_t *)tc)->CCCBUF = buffer_value;
    134c:	24 af       	std	Z+60, r18	; 0x3c
    134e:	35 af       	std	Z+61, r19	; 0x3d
    1350:	0d c0       	rjmp	.+26     	; 0x136c <pwm_start+0x6a>
			break;
		case TC_CCD:
			((TC0_t *)tc)->CCDBUF = buffer_value;
    1352:	26 af       	std	Z+62, r18	; 0x3e
    1354:	37 af       	std	Z+63, r19	; 0x3f
    1356:	0a c0       	rjmp	.+20     	; 0x136c <pwm_start+0x6a>
			break;
		}
	} else if (tc_is_tc1(void *tc)) {
			switch (channel_index) {
    1358:	81 30       	cpi	r24, 0x01	; 1
    135a:	19 f0       	breq	.+6      	; 0x1362 <pwm_start+0x60>
    135c:	82 30       	cpi	r24, 0x02	; 2
    135e:	21 f0       	breq	.+8      	; 0x1368 <pwm_start+0x66>
    1360:	05 c0       	rjmp	.+10     	; 0x136c <pwm_start+0x6a>
			case TC_CCA:
				((TC1_t *)tc)->CCABUF = buffer_value;
    1362:	20 af       	std	Z+56, r18	; 0x38
    1364:	31 af       	std	Z+57, r19	; 0x39
    1366:	02 c0       	rjmp	.+4      	; 0x136c <pwm_start+0x6a>
				break;
			case TC_CCB:
				((TC1_t *)tc)->CCBBUF = buffer_value;
    1368:	22 af       	std	Z+58, r18	; 0x3a
    136a:	33 af       	std	Z+59, r19	; 0x3b
	/* Set given duty cycle */
	pwm_set_duty_cycle_percent(config, duty_cycle_scale);
	/* Set correct TC period */
	tc_write_period(config->tc, config->period);
    136c:	8d 81       	ldd	r24, Y+5	; 0x05
    136e:	9e 81       	ldd	r25, Y+6	; 0x06
    1370:	e8 81       	ld	r30, Y
    1372:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    1374:	86 a3       	std	Z+38, r24	; 0x26
    1376:	97 a3       	std	Z+39, r25	; 0x27
	/* Enable CC channel for this TC */
	tc_enable_cc_channels(config->tc, config->cc_mask);
    1378:	8b 81       	ldd	r24, Y+3	; 0x03
    137a:	e8 81       	ld	r30, Y
    137c:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param enablemask CC channel
 */
static inline void tc_enable_cc_channels(volatile void *tc,
		enum tc_cc_channel_mask_enable_t enablemask)
{
	if (tc_is_tc0(void *tc)) {
    137e:	e6 fd       	sbrc	r30, 6
    1380:	04 c0       	rjmp	.+8      	; 0x138a <pwm_start+0x88>
		((TC0_t *)tc)->CTRLB |= enablemask;
    1382:	91 81       	ldd	r25, Z+1	; 0x01
    1384:	89 2b       	or	r24, r25
    1386:	81 83       	std	Z+1, r24	; 0x01
    1388:	04 c0       	rjmp	.+8      	; 0x1392 <pwm_start+0x90>
	} else if (tc_is_tc1(void *tc)) {
		((TC1_t *)tc)->CTRLB |=
    138a:	91 81       	ldd	r25, Z+1	; 0x01
    138c:	80 73       	andi	r24, 0x30	; 48
    138e:	89 2b       	or	r24, r25
    1390:	81 83       	std	Z+1, r24	; 0x01
	/* Enable TC by setting correct clock prescaler */
	tc_write_clock_source(config->tc, config->clk_sel);
    1392:	e8 81       	ld	r30, Y
    1394:	f9 81       	ldd	r31, Y+1	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    1396:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    1398:	80 7f       	andi	r24, 0xF0	; 240
    139a:	9c 81       	ldd	r25, Y+4	; 0x04
    139c:	89 2b       	or	r24, r25
    139e:	80 83       	st	Z, r24
}
    13a0:	df 91       	pop	r29
    13a2:	cf 91       	pop	r28
    13a4:	08 95       	ret

000013a6 <pwm_callback_1>:

/**
 * \brief PWM channel 1 interrupt callback function
 */
static void pwm_callback_1 (void)
{
    13a6:	cf 93       	push	r28
    13a8:	df 93       	push	r29
	/* Increase (and wrap at 100) the duty cycle */
	if (duty_cycle_percent_1++ >= 100) {
    13aa:	80 91 49 20 	lds	r24, 0x2049	; 0x802049 <duty_cycle_percent_1>
    13ae:	91 e0       	ldi	r25, 0x01	; 1
    13b0:	98 0f       	add	r25, r24
    13b2:	90 93 49 20 	sts	0x2049, r25	; 0x802049 <duty_cycle_percent_1>
    13b6:	84 36       	cpi	r24, 0x64	; 100
    13b8:	c0 f1       	brcs	.+112    	; 0x142a <pwm_callback_1+0x84>
		duty_cycle_percent_1 = 0;
    13ba:	10 92 49 20 	sts	0x2049, r1	; 0x802049 <duty_cycle_percent_1>
	}
	/* Set new duty cycle value */
	pwm_set_duty_cycle_percent(&pwm_1_cfg, duty_cycle_percent_1);
    13be:	a0 91 49 20 	lds	r26, 0x2049	; 0x802049 <duty_cycle_percent_1>
			(uint16_t)(((uint32_t)(config->period + 1) *
    13c2:	c1 e5       	ldi	r28, 0x51	; 81
    13c4:	d0 e2       	ldi	r29, 0x20	; 32
 */
static inline void pwm_set_duty_cycle_percent(struct pwm_config *config,
		uint8_t duty_cycle_scale)
{
	Assert( duty_cycle_scale <= 100 );
	tc_write_cc_buffer(config->tc, (enum tc_cc_channel_t)config->channel,
    13c6:	2d 81       	ldd	r18, Y+5	; 0x05
    13c8:	3e 81       	ldd	r19, Y+6	; 0x06
    13ca:	2f 5f       	subi	r18, 0xFF	; 255
    13cc:	3f 4f       	sbci	r19, 0xFF	; 255
    13ce:	b0 e0       	ldi	r27, 0x00	; 0
    13d0:	03 d1       	rcall	.+518    	; 0x15d8 <__umulhisi3>
    13d2:	24 e6       	ldi	r18, 0x64	; 100
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	40 e0       	ldi	r20, 0x00	; 0
    13d8:	50 e0       	ldi	r21, 0x00	; 0
    13da:	d4 d0       	rcall	.+424    	; 0x1584 <__udivmodsi4>
    13dc:	8a 81       	ldd	r24, Y+2	; 0x02
    13de:	e8 81       	ld	r30, Y
    13e0:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param buffer_value Counter Buffer value
 */
static inline void tc_write_cc_buffer(volatile void *tc,
		enum tc_cc_channel_t channel_index, uint16_t buffer_value)
{
	if (tc_is_tc0(void *tc)) {
    13e2:	e6 fd       	sbrc	r30, 6
    13e4:	17 c0       	rjmp	.+46     	; 0x1414 <pwm_callback_1+0x6e>
		switch (channel_index) {
    13e6:	82 30       	cpi	r24, 0x02	; 2
    13e8:	61 f0       	breq	.+24     	; 0x1402 <pwm_callback_1+0x5c>
    13ea:	18 f4       	brcc	.+6      	; 0x13f2 <pwm_callback_1+0x4c>
    13ec:	81 30       	cpi	r24, 0x01	; 1
    13ee:	31 f0       	breq	.+12     	; 0x13fc <pwm_callback_1+0x56>
    13f0:	31 c0       	rjmp	.+98     	; 0x1454 <pwm_callback_1+0xae>
    13f2:	83 30       	cpi	r24, 0x03	; 3
    13f4:	49 f0       	breq	.+18     	; 0x1408 <pwm_callback_1+0x62>
    13f6:	84 30       	cpi	r24, 0x04	; 4
    13f8:	51 f0       	breq	.+20     	; 0x140e <pwm_callback_1+0x68>
    13fa:	2c c0       	rjmp	.+88     	; 0x1454 <pwm_callback_1+0xae>
		case TC_CCA:
			((TC0_t *)tc)->CCABUF = buffer_value;
    13fc:	20 af       	std	Z+56, r18	; 0x38
    13fe:	31 af       	std	Z+57, r19	; 0x39
    1400:	29 c0       	rjmp	.+82     	; 0x1454 <pwm_callback_1+0xae>
			break;
		case TC_CCB:
			((TC0_t *)tc)->CCBBUF = buffer_value;
    1402:	22 af       	std	Z+58, r18	; 0x3a
    1404:	33 af       	std	Z+59, r19	; 0x3b
    1406:	26 c0       	rjmp	.+76     	; 0x1454 <pwm_callback_1+0xae>
			break;
		case TC_CCC:
			((TC0_t *)tc)->CCCBUF = buffer_value;
    1408:	24 af       	std	Z+60, r18	; 0x3c
    140a:	35 af       	std	Z+61, r19	; 0x3d
    140c:	23 c0       	rjmp	.+70     	; 0x1454 <pwm_callback_1+0xae>
			break;
		case TC_CCD:
			((TC0_t *)tc)->CCDBUF = buffer_value;
    140e:	26 af       	std	Z+62, r18	; 0x3e
    1410:	37 af       	std	Z+63, r19	; 0x3f
    1412:	20 c0       	rjmp	.+64     	; 0x1454 <pwm_callback_1+0xae>
			break;
		}
	} else if (tc_is_tc1(void *tc)) {
			switch (channel_index) {
    1414:	81 30       	cpi	r24, 0x01	; 1
    1416:	19 f0       	breq	.+6      	; 0x141e <pwm_callback_1+0x78>
    1418:	82 30       	cpi	r24, 0x02	; 2
    141a:	21 f0       	breq	.+8      	; 0x1424 <pwm_callback_1+0x7e>
    141c:	1b c0       	rjmp	.+54     	; 0x1454 <pwm_callback_1+0xae>
			case TC_CCA:
				((TC1_t *)tc)->CCABUF = buffer_value;
    141e:	20 af       	std	Z+56, r18	; 0x38
    1420:	31 af       	std	Z+57, r19	; 0x39
    1422:	18 c0       	rjmp	.+48     	; 0x1454 <pwm_callback_1+0xae>
				break;
			case TC_CCB:
				((TC1_t *)tc)->CCBBUF = buffer_value;
    1424:	22 af       	std	Z+58, r18	; 0x3a
    1426:	33 af       	std	Z+59, r19	; 0x3b
}
    1428:	15 c0       	rjmp	.+42     	; 0x1454 <pwm_callback_1+0xae>
	/* Increase (and wrap at 100) the duty cycle */
	if (duty_cycle_percent_1++ >= 100) {
		duty_cycle_percent_1 = 0;
	}
	/* Set new duty cycle value */
	pwm_set_duty_cycle_percent(&pwm_1_cfg, duty_cycle_percent_1);
    142a:	a0 91 49 20 	lds	r26, 0x2049	; 0x802049 <duty_cycle_percent_1>
			(uint16_t)(((uint32_t)(config->period + 1) *
    142e:	c1 e5       	ldi	r28, 0x51	; 81
    1430:	d0 e2       	ldi	r29, 0x20	; 32
 */
static inline void pwm_set_duty_cycle_percent(struct pwm_config *config,
		uint8_t duty_cycle_scale)
{
	Assert( duty_cycle_scale <= 100 );
	tc_write_cc_buffer(config->tc, (enum tc_cc_channel_t)config->channel,
    1432:	2d 81       	ldd	r18, Y+5	; 0x05
    1434:	3e 81       	ldd	r19, Y+6	; 0x06
    1436:	2f 5f       	subi	r18, 0xFF	; 255
    1438:	3f 4f       	sbci	r19, 0xFF	; 255
    143a:	b0 e0       	ldi	r27, 0x00	; 0
    143c:	cd d0       	rcall	.+410    	; 0x15d8 <__umulhisi3>
    143e:	24 e6       	ldi	r18, 0x64	; 100
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	40 e0       	ldi	r20, 0x00	; 0
    1444:	50 e0       	ldi	r21, 0x00	; 0
    1446:	9e d0       	rcall	.+316    	; 0x1584 <__udivmodsi4>
    1448:	8a 81       	ldd	r24, Y+2	; 0x02
    144a:	e8 81       	ld	r30, Y
    144c:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param buffer_value Counter Buffer value
 */
static inline void tc_write_cc_buffer(volatile void *tc,
		enum tc_cc_channel_t channel_index, uint16_t buffer_value)
{
	if (tc_is_tc0(void *tc)) {
    144e:	e6 ff       	sbrs	r30, 6
    1450:	ca cf       	rjmp	.-108    	; 0x13e6 <pwm_callback_1+0x40>
    1452:	e0 cf       	rjmp	.-64     	; 0x1414 <pwm_callback_1+0x6e>
}
    1454:	df 91       	pop	r29
    1456:	cf 91       	pop	r28
    1458:	08 95       	ret

0000145a <pwm_callback_2>:

/**
 * \brief PWM channel 2 interrupt callback function
 */
static void pwm_callback_2 (void)
{
    145a:	cf 93       	push	r28
    145c:	df 93       	push	r29
	/* Increase (and wrap at 100) the duty cycle */
	if (duty_cycle_percent_2++ >= 100) {
    145e:	80 91 48 20 	lds	r24, 0x2048	; 0x802048 <duty_cycle_percent_2>
    1462:	91 e0       	ldi	r25, 0x01	; 1
    1464:	98 0f       	add	r25, r24
    1466:	90 93 48 20 	sts	0x2048, r25	; 0x802048 <duty_cycle_percent_2>
    146a:	84 36       	cpi	r24, 0x64	; 100
    146c:	c0 f1       	brcs	.+112    	; 0x14de <pwm_callback_2+0x84>
		duty_cycle_percent_2 = 0;
    146e:	10 92 48 20 	sts	0x2048, r1	; 0x802048 <duty_cycle_percent_2>
	}
	/* Set new duty cycle value */
	pwm_set_duty_cycle_percent(&pwm_2_cfg, duty_cycle_percent_2);
    1472:	a0 91 48 20 	lds	r26, 0x2048	; 0x802048 <duty_cycle_percent_2>
			(uint16_t)(((uint32_t)(config->period + 1) *
    1476:	ca e4       	ldi	r28, 0x4A	; 74
    1478:	d0 e2       	ldi	r29, 0x20	; 32
 */
static inline void pwm_set_duty_cycle_percent(struct pwm_config *config,
		uint8_t duty_cycle_scale)
{
	Assert( duty_cycle_scale <= 100 );
	tc_write_cc_buffer(config->tc, (enum tc_cc_channel_t)config->channel,
    147a:	2d 81       	ldd	r18, Y+5	; 0x05
    147c:	3e 81       	ldd	r19, Y+6	; 0x06
    147e:	2f 5f       	subi	r18, 0xFF	; 255
    1480:	3f 4f       	sbci	r19, 0xFF	; 255
    1482:	b0 e0       	ldi	r27, 0x00	; 0
    1484:	a9 d0       	rcall	.+338    	; 0x15d8 <__umulhisi3>
    1486:	24 e6       	ldi	r18, 0x64	; 100
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	40 e0       	ldi	r20, 0x00	; 0
    148c:	50 e0       	ldi	r21, 0x00	; 0
    148e:	7a d0       	rcall	.+244    	; 0x1584 <__udivmodsi4>
    1490:	8a 81       	ldd	r24, Y+2	; 0x02
    1492:	e8 81       	ld	r30, Y
    1494:	f9 81       	ldd	r31, Y+1	; 0x01
    1496:	e6 fd       	sbrc	r30, 6
    1498:	17 c0       	rjmp	.+46     	; 0x14c8 <pwm_callback_2+0x6e>
		switch (channel_index) {
    149a:	82 30       	cpi	r24, 0x02	; 2
    149c:	61 f0       	breq	.+24     	; 0x14b6 <pwm_callback_2+0x5c>
    149e:	18 f4       	brcc	.+6      	; 0x14a6 <pwm_callback_2+0x4c>
    14a0:	81 30       	cpi	r24, 0x01	; 1
    14a2:	31 f0       	breq	.+12     	; 0x14b0 <pwm_callback_2+0x56>
    14a4:	31 c0       	rjmp	.+98     	; 0x1508 <pwm_callback_2+0xae>
    14a6:	83 30       	cpi	r24, 0x03	; 3
    14a8:	49 f0       	breq	.+18     	; 0x14bc <pwm_callback_2+0x62>
    14aa:	84 30       	cpi	r24, 0x04	; 4
    14ac:	51 f0       	breq	.+20     	; 0x14c2 <pwm_callback_2+0x68>
    14ae:	2c c0       	rjmp	.+88     	; 0x1508 <pwm_callback_2+0xae>
		case TC_CCA:
			((TC0_t *)tc)->CCABUF = buffer_value;
    14b0:	20 af       	std	Z+56, r18	; 0x38
    14b2:	31 af       	std	Z+57, r19	; 0x39
    14b4:	29 c0       	rjmp	.+82     	; 0x1508 <pwm_callback_2+0xae>
			break;
		case TC_CCB:
			((TC0_t *)tc)->CCBBUF = buffer_value;
    14b6:	22 af       	std	Z+58, r18	; 0x3a
    14b8:	33 af       	std	Z+59, r19	; 0x3b
    14ba:	26 c0       	rjmp	.+76     	; 0x1508 <pwm_callback_2+0xae>
			break;
		case TC_CCC:
			((TC0_t *)tc)->CCCBUF = buffer_value;
    14bc:	24 af       	std	Z+60, r18	; 0x3c
    14be:	35 af       	std	Z+61, r19	; 0x3d
    14c0:	23 c0       	rjmp	.+70     	; 0x1508 <pwm_callback_2+0xae>
			break;
		case TC_CCD:
			((TC0_t *)tc)->CCDBUF = buffer_value;
    14c2:	26 af       	std	Z+62, r18	; 0x3e
    14c4:	37 af       	std	Z+63, r19	; 0x3f
    14c6:	20 c0       	rjmp	.+64     	; 0x1508 <pwm_callback_2+0xae>
			break;
		}
	} else if (tc_is_tc1(void *tc)) {
			switch (channel_index) {
    14c8:	81 30       	cpi	r24, 0x01	; 1
    14ca:	19 f0       	breq	.+6      	; 0x14d2 <pwm_callback_2+0x78>
    14cc:	82 30       	cpi	r24, 0x02	; 2
    14ce:	21 f0       	breq	.+8      	; 0x14d8 <pwm_callback_2+0x7e>
    14d0:	1b c0       	rjmp	.+54     	; 0x1508 <pwm_callback_2+0xae>
			case TC_CCA:
				((TC1_t *)tc)->CCABUF = buffer_value;
    14d2:	20 af       	std	Z+56, r18	; 0x38
    14d4:	31 af       	std	Z+57, r19	; 0x39
    14d6:	18 c0       	rjmp	.+48     	; 0x1508 <pwm_callback_2+0xae>
				break;
			case TC_CCB:
				((TC1_t *)tc)->CCBBUF = buffer_value;
    14d8:	22 af       	std	Z+58, r18	; 0x3a
    14da:	33 af       	std	Z+59, r19	; 0x3b
}
    14dc:	15 c0       	rjmp	.+42     	; 0x1508 <pwm_callback_2+0xae>
	/* Increase (and wrap at 100) the duty cycle */
	if (duty_cycle_percent_2++ >= 100) {
		duty_cycle_percent_2 = 0;
	}
	/* Set new duty cycle value */
	pwm_set_duty_cycle_percent(&pwm_2_cfg, duty_cycle_percent_2);
    14de:	a0 91 48 20 	lds	r26, 0x2048	; 0x802048 <duty_cycle_percent_2>
			(uint16_t)(((uint32_t)(config->period + 1) *
    14e2:	ca e4       	ldi	r28, 0x4A	; 74
    14e4:	d0 e2       	ldi	r29, 0x20	; 32
 */
static inline void pwm_set_duty_cycle_percent(struct pwm_config *config,
		uint8_t duty_cycle_scale)
{
	Assert( duty_cycle_scale <= 100 );
	tc_write_cc_buffer(config->tc, (enum tc_cc_channel_t)config->channel,
    14e6:	2d 81       	ldd	r18, Y+5	; 0x05
    14e8:	3e 81       	ldd	r19, Y+6	; 0x06
    14ea:	2f 5f       	subi	r18, 0xFF	; 255
    14ec:	3f 4f       	sbci	r19, 0xFF	; 255
    14ee:	b0 e0       	ldi	r27, 0x00	; 0
    14f0:	73 d0       	rcall	.+230    	; 0x15d8 <__umulhisi3>
    14f2:	24 e6       	ldi	r18, 0x64	; 100
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	40 e0       	ldi	r20, 0x00	; 0
    14f8:	50 e0       	ldi	r21, 0x00	; 0
    14fa:	44 d0       	rcall	.+136    	; 0x1584 <__udivmodsi4>
    14fc:	8a 81       	ldd	r24, Y+2	; 0x02
    14fe:	e8 81       	ld	r30, Y
    1500:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param buffer_value Counter Buffer value
 */
static inline void tc_write_cc_buffer(volatile void *tc,
		enum tc_cc_channel_t channel_index, uint16_t buffer_value)
{
	if (tc_is_tc0(void *tc)) {
    1502:	e6 ff       	sbrs	r30, 6
    1504:	ca cf       	rjmp	.-108    	; 0x149a <pwm_callback_2+0x40>
    1506:	e0 cf       	rjmp	.-64     	; 0x14c8 <pwm_callback_2+0x6e>
}
    1508:	df 91       	pop	r29
    150a:	cf 91       	pop	r28
    150c:	08 95       	ret

0000150e <main>:
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    150e:	87 e0       	ldi	r24, 0x07	; 7
    1510:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
 */
int main( void )
{
	/* Initialize interrupt controller, board and sysclock */
	pmic_init();
	sysclk_init();
    1514:	0e 94 10 01 	call	0x220	; 0x220 <sysclk_init>

	/* Enable global interrupts */
	cpu_irq_enable();
    1518:	78 94       	sei
	/*
	  Set up first PWM channel
	*/

	/* Set PWM to TC E0, channel A (PE0 = LED0), 75 Hz */
	pwm_init(&pwm_1_cfg, PWM_TCE0, PWM_CH_A, 75);
    151a:	2b e4       	ldi	r18, 0x4B	; 75
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	41 e0       	ldi	r20, 0x01	; 1
    1520:	64 e0       	ldi	r22, 0x04	; 4
    1522:	81 e5       	ldi	r24, 0x51	; 81
    1524:	90 e2       	ldi	r25, 0x20	; 32
    1526:	27 de       	rcall	.-946    	; 0x1176 <pwm_init>
 * \param callback          Callback function
 */
static inline void pwm_overflow_int_callback(struct pwm_config *config,
		pwm_callback_t callback)
{
	tc_set_overflow_interrupt_level(config->tc, TC_INT_LVL_LO);
    1528:	e0 91 51 20 	lds	r30, 0x2051	; 0x802051 <pwm_1_cfg>
    152c:	f0 91 52 20 	lds	r31, 0x2052	; 0x802052 <pwm_1_cfg+0x1>
 * \note  Configures OVFINTLVL in INTCTRLA
 */
static inline void tc_set_overflow_interrupt_level(volatile void *tc,
		enum TC_INT_LEVEL_t level)
{
	((TC0_t *)tc)->INTCTRLA = ((TC0_t *)tc)->INTCTRLA & ~TC0_OVFINTLVL_gm;
    1530:	86 81       	ldd	r24, Z+6	; 0x06
    1532:	8c 7f       	andi	r24, 0xFC	; 252
    1534:	86 83       	std	Z+6, r24	; 0x06
	((TC0_t *)tc)->INTCTRLA =
			((TC0_t *)tc)->INTCTRLA | (level << TC0_OVFINTLVL_gp);
    1536:	86 81       	ldd	r24, Z+6	; 0x06
 */
static inline void tc_set_overflow_interrupt_level(volatile void *tc,
		enum TC_INT_LEVEL_t level)
{
	((TC0_t *)tc)->INTCTRLA = ((TC0_t *)tc)->INTCTRLA & ~TC0_OVFINTLVL_gm;
	((TC0_t *)tc)->INTCTRLA =
    1538:	81 60       	ori	r24, 0x01	; 1
    153a:	86 83       	std	Z+6, r24	; 0x06
	tc_set_overflow_interrupt_callback(config->tc, callback);
    153c:	63 ed       	ldi	r22, 0xD3	; 211
    153e:	79 e0       	ldi	r23, 0x09	; 9
    1540:	cf 01       	movw	r24, r30
    1542:	73 dd       	rcall	.-1306   	; 0x102a <tc_set_overflow_interrupt_callback>
	/*
	  Set up second PWM channel
	*/

	/* Set PWM to TC E1, channel A (PE4 = LED4), 250 Hz */
	pwm_init(&pwm_2_cfg, PWM_TCE1, PWM_CH_A, 250);
    1544:	2a ef       	ldi	r18, 0xFA	; 250
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	41 e0       	ldi	r20, 0x01	; 1
    154a:	65 e0       	ldi	r22, 0x05	; 5
    154c:	8a e4       	ldi	r24, 0x4A	; 74
    154e:	90 e2       	ldi	r25, 0x20	; 32
    1550:	12 de       	rcall	.-988    	; 0x1176 <pwm_init>
 * \param callback          Callback function
 */
static inline void pwm_overflow_int_callback(struct pwm_config *config,
		pwm_callback_t callback)
{
	tc_set_overflow_interrupt_level(config->tc, TC_INT_LVL_LO);
    1552:	e0 91 4a 20 	lds	r30, 0x204A	; 0x80204a <pwm_2_cfg>
    1556:	f0 91 4b 20 	lds	r31, 0x204B	; 0x80204b <pwm_2_cfg+0x1>
 * \note  Configures OVFINTLVL in INTCTRLA
 */
static inline void tc_set_overflow_interrupt_level(volatile void *tc,
		enum TC_INT_LEVEL_t level)
{
	((TC0_t *)tc)->INTCTRLA = ((TC0_t *)tc)->INTCTRLA & ~TC0_OVFINTLVL_gm;
    155a:	86 81       	ldd	r24, Z+6	; 0x06
    155c:	8c 7f       	andi	r24, 0xFC	; 252
    155e:	86 83       	std	Z+6, r24	; 0x06
	((TC0_t *)tc)->INTCTRLA =
			((TC0_t *)tc)->INTCTRLA | (level << TC0_OVFINTLVL_gp);
    1560:	86 81       	ldd	r24, Z+6	; 0x06
 */
static inline void tc_set_overflow_interrupt_level(volatile void *tc,
		enum TC_INT_LEVEL_t level)
{
	((TC0_t *)tc)->INTCTRLA = ((TC0_t *)tc)->INTCTRLA & ~TC0_OVFINTLVL_gm;
	((TC0_t *)tc)->INTCTRLA =
    1562:	81 60       	ori	r24, 0x01	; 1
    1564:	86 83       	std	Z+6, r24	; 0x06
	tc_set_overflow_interrupt_callback(config->tc, callback);
    1566:	6d e2       	ldi	r22, 0x2D	; 45
    1568:	7a e0       	ldi	r23, 0x0A	; 10
    156a:	cf 01       	movw	r24, r30
    156c:	5e dd       	rcall	.-1348   	; 0x102a <tc_set_overflow_interrupt_callback>

	/*
	  Start PWM
	*/

	pwm_start(&pwm_1_cfg, duty_cycle_percent_1);
    156e:	60 91 49 20 	lds	r22, 0x2049	; 0x802049 <duty_cycle_percent_1>
    1572:	81 e5       	ldi	r24, 0x51	; 81
    1574:	90 e2       	ldi	r25, 0x20	; 32
    1576:	c5 de       	rcall	.-630    	; 0x1302 <pwm_start>
	pwm_start(&pwm_2_cfg, duty_cycle_percent_2);
    1578:	60 91 48 20 	lds	r22, 0x2048	; 0x802048 <duty_cycle_percent_2>
    157c:	8a e4       	ldi	r24, 0x4A	; 74
    157e:	90 e2       	ldi	r25, 0x20	; 32
    1580:	c0 de       	rcall	.-640    	; 0x1302 <pwm_start>
    1582:	ff cf       	rjmp	.-2      	; 0x1582 <main+0x74>

00001584 <__udivmodsi4>:
    1584:	a1 e2       	ldi	r26, 0x21	; 33
    1586:	1a 2e       	mov	r1, r26
    1588:	aa 1b       	sub	r26, r26
    158a:	bb 1b       	sub	r27, r27
    158c:	fd 01       	movw	r30, r26
    158e:	0d c0       	rjmp	.+26     	; 0x15aa <__udivmodsi4_ep>

00001590 <__udivmodsi4_loop>:
    1590:	aa 1f       	adc	r26, r26
    1592:	bb 1f       	adc	r27, r27
    1594:	ee 1f       	adc	r30, r30
    1596:	ff 1f       	adc	r31, r31
    1598:	a2 17       	cp	r26, r18
    159a:	b3 07       	cpc	r27, r19
    159c:	e4 07       	cpc	r30, r20
    159e:	f5 07       	cpc	r31, r21
    15a0:	20 f0       	brcs	.+8      	; 0x15aa <__udivmodsi4_ep>
    15a2:	a2 1b       	sub	r26, r18
    15a4:	b3 0b       	sbc	r27, r19
    15a6:	e4 0b       	sbc	r30, r20
    15a8:	f5 0b       	sbc	r31, r21

000015aa <__udivmodsi4_ep>:
    15aa:	66 1f       	adc	r22, r22
    15ac:	77 1f       	adc	r23, r23
    15ae:	88 1f       	adc	r24, r24
    15b0:	99 1f       	adc	r25, r25
    15b2:	1a 94       	dec	r1
    15b4:	69 f7       	brne	.-38     	; 0x1590 <__udivmodsi4_loop>
    15b6:	60 95       	com	r22
    15b8:	70 95       	com	r23
    15ba:	80 95       	com	r24
    15bc:	90 95       	com	r25
    15be:	9b 01       	movw	r18, r22
    15c0:	ac 01       	movw	r20, r24
    15c2:	bd 01       	movw	r22, r26
    15c4:	cf 01       	movw	r24, r30
    15c6:	08 95       	ret

000015c8 <__tablejump2__>:
    15c8:	ee 0f       	add	r30, r30
    15ca:	ff 1f       	adc	r31, r31
    15cc:	88 1f       	adc	r24, r24
    15ce:	8b bf       	out	0x3b, r24	; 59
    15d0:	07 90       	elpm	r0, Z+
    15d2:	f6 91       	elpm	r31, Z
    15d4:	e0 2d       	mov	r30, r0
    15d6:	19 94       	eijmp

000015d8 <__umulhisi3>:
    15d8:	a2 9f       	mul	r26, r18
    15da:	b0 01       	movw	r22, r0
    15dc:	b3 9f       	mul	r27, r19
    15de:	c0 01       	movw	r24, r0
    15e0:	a3 9f       	mul	r26, r19
    15e2:	70 0d       	add	r23, r0
    15e4:	81 1d       	adc	r24, r1
    15e6:	11 24       	eor	r1, r1
    15e8:	91 1d       	adc	r25, r1
    15ea:	b2 9f       	mul	r27, r18
    15ec:	70 0d       	add	r23, r0
    15ee:	81 1d       	adc	r24, r1
    15f0:	11 24       	eor	r1, r1
    15f2:	91 1d       	adc	r25, r1
    15f4:	08 95       	ret

000015f6 <_exit>:
    15f6:	f8 94       	cli

000015f8 <__stop_program>:
    15f8:	ff cf       	rjmp	.-2      	; 0x15f8 <__stop_program>
